{"version":3,"file":"OlStyleParser.js","sourceRoot":"","sources":["../src/OlStyleParser.ts"],"names":[],"mappings":"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","sourcesContent":["import { parseFont } from 'css-font-parser';\r\n\r\nimport {\r\n  CapType,\r\n  FillSymbolizer,\r\n  Filter,\r\n  IconSymbolizer,\r\n  JoinType,\r\n  LineSymbolizer,\r\n  MarkSymbolizer,\r\n  Operator,\r\n  PointSymbolizer,\r\n  ReadStyleResult,\r\n  Rule,\r\n  Style,\r\n  StyleParser,\r\n  StyleType,\r\n  Symbolizer,\r\n  TextSymbolizer,\r\n  UnsupportedProperties,\r\n  WriteStyleResult\r\n} from 'geostyler-style/dist/style';\r\n\r\nimport {\r\n  isGeoStylerBooleanFunction,\r\n  isGeoStylerFunction,\r\n  isGeoStylerStringFunction,\r\n  isIconSymbolizer,\r\n  isMarkSymbolizer,\r\n  isSprite\r\n} from 'geostyler-style/dist/typeguards';\r\n\r\nimport OlGeomPoint from 'ol/geom/Point';\r\n\r\nimport OlStyle, { StyleFunction as OlStyleFunction, StyleLike as OlStyleLike} from 'ol/style/Style';\r\nimport OlStyleImage from 'ol/style/Image';\r\nimport OlStyleStroke from 'ol/style/Stroke';\r\nimport OlStyleText, { Options as OlStyleTextOptions }  from 'ol/style/Text';\r\nimport OlStyleCircle from 'ol/style/Circle';\r\nimport OlStyleFill from 'ol/style/Fill';\r\nimport OlStyleIcon, { Options as OlStyleIconOptions }  from 'ol/style/Icon';\r\nimport OlStyleRegularshape from 'ol/style/RegularShape';\r\nimport { METERS_PER_UNIT } from 'ol/proj/Units';\r\n\r\nimport OlStyleUtil, { LINE_WELLKNOWNNAMES } from './Util/OlStyleUtil';\r\nimport { getShapeSvg, getSvgProperties, isPointSvgDefined, removeDuplicateShapes, SvgOptions } from './Util/svgs';\r\nimport { toContext } from 'ol/render';\r\nimport OlFeature from 'ol/Feature';\r\n\r\nexport interface OlParserStyleFct {\r\n  (feature?: any, resolution?: number): any;\r\n  __geoStylerStyle: Style;\r\n}\r\n\r\ntype SymbolizerKeyType = keyof UnsupportedProperties['Symbolizer'];\r\n\r\n/**\r\n * This parser can be used with the GeoStyler.\r\n * It implements the GeoStyler-Style Parser interface to work with OpenLayers styles.\r\n *\r\n * @class OlStyleParser\r\n * @implements StyleParser\r\n */\r\nexport class OlStyleParser implements StyleParser<OlStyleLike> {\r\n\r\n  /**\r\n   * The name of the OlStyleParser.\r\n   */\r\n  public static title = 'OpenLayers Style Parser';\r\n\r\n  unsupportedProperties: UnsupportedProperties = {\r\n    Symbolizer: {\r\n      MarkSymbolizer: {\r\n        avoidEdges: 'none',\r\n        blur: 'none',\r\n        offsetAnchor: 'none',\r\n        pitchAlignment: 'none',\r\n        pitchScale: 'none'\r\n      },\r\n      FillSymbolizer: {\r\n        antialias: 'none',\r\n        opacity: {\r\n          support: 'none',\r\n          info: 'Use fillOpacity instead.'\r\n        }\r\n      },\r\n      IconSymbolizer: {\r\n        allowOverlap: 'none',\r\n        anchor: 'none',\r\n        avoidEdges: 'none',\r\n        color: 'none',\r\n        haloBlur: 'none',\r\n        haloColor: 'none',\r\n        haloWidth: 'none',\r\n        keepUpright: 'none',\r\n        offsetAnchor: 'none',\r\n        size: {\r\n          support: 'partial',\r\n          info: 'Will set/get the width of the ol Icon.'\r\n        },\r\n        optional: 'none',\r\n        padding: 'none',\r\n        pitchAlignment: 'none',\r\n        rotationAlignment: 'none',\r\n        textFit: 'none',\r\n        textFitPadding: 'none'\r\n      },\r\n      LineSymbolizer: {\r\n        blur: 'none',\r\n        gapWidth: 'none',\r\n        gradient: 'none',\r\n        miterLimit: 'none',\r\n        roundLimit: 'none',\r\n        spacing: 'none',\r\n        graphicFill: 'none',\r\n        graphicStroke: 'none',\r\n        perpendicularOffset: 'none'\r\n      },\r\n      RasterSymbolizer: 'none',\r\n      TextSymbolizer: {\r\n        anchor: 'none',\r\n        placement: {\r\n          support:'partial',\r\n          info: 'point and line supported. line-center will be mapped to line.'\r\n        }\r\n      }\r\n    },\r\n    Function: {\r\n      double2bool: {\r\n        support: 'none',\r\n        info: 'Always returns false'\r\n      },\r\n      atan2: {\r\n        support: 'none',\r\n        info: 'Currently returns the first argument'\r\n      },\r\n      rint: {\r\n        support: 'none',\r\n        info: 'Currently returns the first argument'\r\n      },\r\n      numberFormat: {\r\n        support: 'none',\r\n        info: 'Currently returns the first argument'\r\n      },\r\n      strAbbreviate: {\r\n        support: 'none',\r\n        info: 'Currently returns the first argument'\r\n      }\r\n    }\r\n  };\r\n\r\n  title = 'OpenLayers Style Parser';\r\n  olIconStyleCache: any = {};\r\n\r\n  OlStyleConstructor = OlStyle;\r\n  OlStyleImageConstructor = OlStyleImage;\r\n  OlStyleFillConstructor = OlStyleFill;\r\n  OlStyleStrokeConstructor = OlStyleStroke;\r\n  OlStyleTextConstructor = OlStyleText;\r\n  OlStyleCircleConstructor = OlStyleCircle;\r\n  OlStyleIconConstructor = OlStyleIcon;\r\n  OlStyleRegularshapeConstructor = OlStyleRegularshape;\r\n\r\n  constructor(ol?: any) {\r\n    if (ol) {\r\n      this.OlStyleConstructor = ol.style.Style;\r\n      this.OlStyleImageConstructor = ol.style.Image;\r\n      this.OlStyleFillConstructor = ol.style.Fill;\r\n      this.OlStyleStrokeConstructor = ol.style.Stroke;\r\n      this.OlStyleTextConstructor = ol.style.Text;\r\n      this.OlStyleCircleConstructor = ol.style.Circle;\r\n      this.OlStyleIconConstructor = ol.style.Icon;\r\n      this.OlStyleRegularshapeConstructor = ol.style.RegularShape;\r\n    }\r\n  }\r\n\r\n  isOlParserStyleFct = (x: any): x is OlParserStyleFct => {\r\n    return typeof x === 'function';\r\n  };\r\n\r\n  /**\r\n   * Get the GeoStyler-Style PointSymbolizer from an OpenLayers Style object.\r\n   *\r\n   * @param olStyle The OpenLayers Style object\r\n   * @return The GeoStyler-Style PointSymbolizer\r\n   */\r\n  getPointSymbolizerFromOlStyle(olStyle: OlStyle): PointSymbolizer {\r\n    let pointSymbolizer: PointSymbolizer;\r\n    if (olStyle.getImage() instanceof this.OlStyleCircleConstructor) {\r\n      // circle\r\n      const olCircleStyle: OlStyleCircle = olStyle.getImage() as OlStyleCircle;\r\n      const olFillStyle = olCircleStyle.getFill();\r\n      const olStrokeStyle = olCircleStyle.getStroke();\r\n      const offset = olCircleStyle.getDisplacement() as [number, number];\r\n\r\n      const circleSymbolizer: MarkSymbolizer = {\r\n        kind: 'Mark',\r\n        wellKnownName: 'circle',\r\n        color: olFillStyle ? OlStyleUtil.getHexColor(olFillStyle.getColor() as string) : undefined,\r\n        opacity: olCircleStyle.getOpacity() !== 1 ? olCircleStyle.getOpacity() : undefined,\r\n        fillOpacity: olFillStyle ? OlStyleUtil.getOpacity(olFillStyle.getColor() as string) : undefined,\r\n        radius: (olCircleStyle.getRadius() !== 0) ? olCircleStyle.getRadius() : 5,\r\n        strokeColor: olStrokeStyle ? olStrokeStyle.getColor() as string : undefined,\r\n        strokeOpacity: olStrokeStyle ? OlStyleUtil.getOpacity(olStrokeStyle.getColor() as string) : undefined,\r\n        strokeWidth: olStrokeStyle ? olStrokeStyle.getWidth() : undefined,\r\n        offset: offset[0] || offset[1] ? offset : undefined\r\n      };\r\n      pointSymbolizer = circleSymbolizer;\r\n    } else if (olStyle.getImage() instanceof this.OlStyleRegularshapeConstructor) {\r\n      // square, triangle, star, cross or x\r\n      const olRegularStyle: OlStyleRegularshape = olStyle.getImage() as OlStyleRegularshape;\r\n      const olFillStyle = olRegularStyle.getFill();\r\n      const olStrokeStyle = olRegularStyle.getStroke();\r\n      const radius = olRegularStyle.getRadius();\r\n      const radius2 = olRegularStyle.getRadius2();\r\n      const points = olRegularStyle.getPoints();\r\n      const angle = olRegularStyle.getAngle();\r\n      const offset = olRegularStyle.getDisplacement() as [number, number];\r\n\r\n      const markSymbolizer: MarkSymbolizer = {\r\n        kind: 'Mark',\r\n        color: olFillStyle ? OlStyleUtil.getHexColor(olFillStyle.getColor() as string) : undefined,\r\n        opacity: olRegularStyle.getOpacity() !== 1 ? olRegularStyle.getOpacity() : undefined,\r\n        fillOpacity: olFillStyle ? OlStyleUtil.getOpacity(olFillStyle.getColor() as string) : undefined,\r\n        strokeColor: olStrokeStyle ? olStrokeStyle.getColor() as string : undefined,\r\n        strokeOpacity: olStrokeStyle ? OlStyleUtil.getOpacity(olStrokeStyle.getColor() as string) : undefined,\r\n        strokeWidth: olStrokeStyle ? olStrokeStyle.getWidth() : undefined,\r\n        radius: (radius !== 0) ? radius : 5,\r\n        // Rotation in openlayers is radians while we use degree\r\n        rotate: olRegularStyle.getRotation() / Math.PI * 180,\r\n        offset: offset[0] || offset[1] ? offset : undefined\r\n      } as MarkSymbolizer;\r\n\r\n      switch (points) {\r\n        case 2:\r\n          switch (angle) {\r\n            case 0:\r\n              markSymbolizer.wellKnownName = 'shape://vertline';\r\n              break;\r\n            case Math.PI / 2:\r\n              markSymbolizer.wellKnownName = 'shape://horline';\r\n              break;\r\n            case Math.PI / 4:\r\n              markSymbolizer.wellKnownName = 'shape://slash';\r\n              break;\r\n            case 2 * Math.PI - (Math.PI / 4):\r\n              markSymbolizer.wellKnownName = 'shape://backslash';\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          break;\r\n        case 3:\r\n          switch (angle) {\r\n            case 0:\r\n              markSymbolizer.wellKnownName = 'triangle';\r\n              break;\r\n            case Math.PI / 2:\r\n              markSymbolizer.wellKnownName = 'shape://carrow';\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          break;\r\n        case 4:\r\n          if (Number.isFinite(radius2)) {\r\n            // cross or x\r\n            if (olRegularStyle.getAngle() === 0) {\r\n              // cross\r\n              markSymbolizer.wellKnownName = 'cross';\r\n            } else {\r\n              // x\r\n              markSymbolizer.wellKnownName = 'x';\r\n            }\r\n          } else {\r\n            // square\r\n            markSymbolizer.wellKnownName = 'square';\r\n          }\r\n          break;\r\n        case 5:\r\n          // star\r\n          markSymbolizer.wellKnownName = 'star';\r\n          break;\r\n        default:\r\n          throw new Error('Could not parse OlStyle. Only 2, 3, 4 or 5 point regular shapes are allowed');\r\n      }\r\n      pointSymbolizer = markSymbolizer;\r\n    } else if (olStyle.getText() instanceof this.OlStyleTextConstructor) {\r\n      const olTextStyle: OlStyleText = olStyle.getText() as OlStyleText;\r\n      const olFillStyle = olTextStyle.getFill();\r\n      const olStrokeStyle = olTextStyle.getStroke();\r\n      const rotation = olTextStyle.getRotation();\r\n      let char = olTextStyle.getText() || 'a';\r\n      const font = olTextStyle.getFont() || '10px sans-serif';\r\n      const fontName = OlStyleUtil.getFontNameFromOlFont(font);\r\n      const radius = OlStyleUtil.getSizeFromOlFont(font);\r\n      const offset = [olTextStyle.getOffsetX(), olTextStyle.getOffsetY()];\r\n\r\n      if (Array.isArray(char)) {\r\n        char = char[0];\r\n      }\r\n\r\n      pointSymbolizer = {\r\n        kind: 'Mark',\r\n        wellKnownName: `ttf://${fontName}#0x${char.charCodeAt(0).toString(16)}`,\r\n        color: olFillStyle ? OlStyleUtil.getHexColor(olFillStyle.getColor() as string) : undefined,\r\n        opacity: olFillStyle ? OlStyleUtil.getOpacity(olFillStyle.getColor() as string) : undefined,\r\n        strokeColor: olStrokeStyle ? olStrokeStyle.getColor() as string : undefined,\r\n        strokeOpacity: olStrokeStyle ? OlStyleUtil.getOpacity(olStrokeStyle.getColor() as string) : undefined,\r\n        strokeWidth: olStrokeStyle ? olStrokeStyle.getWidth() : undefined,\r\n        radius: (radius !== 0) ? radius : 5,\r\n        // Rotation in openlayers is radians while we use degree\r\n        rotate: rotation ? rotation / Math.PI * 180 : 0,\r\n        offset: offset[0] || offset[1] ? offset : undefined\r\n      } as MarkSymbolizer;\r\n    } else {\r\n      // icon\r\n      const olIconStyle = olStyle.getImage() as OlStyleIcon;\r\n      const displacement = olIconStyle.getDisplacement() as [number, number];\r\n      // initialOptions_ as fallback when image is not yet loaded\r\n      // this always gets calculated from ol so this might not have been set initially\r\n      let size = olIconStyle.getWidth();\r\n      const rotation = olIconStyle.getRotation() / Math.PI * 180;\r\n      const opacity = olIconStyle.getOpacity();\r\n\r\n      // If the image is an SVG string try to extract the properties and build a MarkSymbolizer\r\n      try {\r\n        const svgString = OlStyleUtil.getBase64DecodedSvg(olIconStyle.getSrc() as string);\r\n        const { id, dimensions, fill, stroke, strokeWidth } = getSvgProperties(svgString);\r\n        let { fillOpacity, strokeOpacity } = getSvgProperties(svgString);\r\n\r\n        fillOpacity = OlStyleUtil.checkOpacity(fillOpacity)\r\n          ? fillOpacity : OlStyleUtil.getOpacity(String(fill));\r\n        strokeOpacity = !OlStyleUtil.checkOpacity(strokeOpacity)\r\n          ? strokeOpacity : OlStyleUtil.getOpacity(String(stroke));\r\n\r\n        pointSymbolizer = {\r\n          kind: 'Mark',\r\n          wellKnownName: id,\r\n          ...fill && { color: fill },\r\n          ...OlStyleUtil.checkOpacity(fillOpacity) && { fillOpacity },\r\n          ...stroke && { strokeColor: stroke.substring(0, 7) },\r\n          ...strokeWidth && { strokeWidth },\r\n          ...OlStyleUtil.checkOpacity(strokeOpacity) && { strokeOpacity },\r\n          ...dimensions / 2 !== 0 && { radius: dimensions / 2 },\r\n          ...OlStyleUtil.checkOpacity(opacity) && { opacity },\r\n          ...rotation && { rotate: rotation },\r\n          ...(displacement[0] || displacement[1]) && { offset: displacement },\r\n        } as MarkSymbolizer;\r\n      } catch {\r\n        // initialOptions_ as fallback when image is not yet loaded\r\n        const image = this.getImageFromIconStyle(olIconStyle);\r\n\r\n        const iconSymbolizer: IconSymbolizer = {\r\n          kind: 'Icon',\r\n          image,\r\n          size,\r\n          ...OlStyleUtil.checkOpacity(opacity) && { opacity },\r\n          // Rotation in openlayers is radians while we use degree\r\n          ...rotation && { rotate: rotation },\r\n          ...(displacement[0] || displacement[1]) && { offset: displacement },\r\n        };\r\n        pointSymbolizer = iconSymbolizer;\r\n      }\r\n\r\n    }\r\n    return pointSymbolizer;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param olIconStyle An ol style Icon representation\r\n   * @returns A string or Sprite configuration\r\n   */\r\n  getImageFromIconStyle(olIconStyle: OlStyleIcon): IconSymbolizer['image'] {\r\n    const size = olIconStyle.getSize();\r\n    if (Array.isArray(size)) {\r\n      // TODO: create getters (and setters?) in openlayers\r\n      // @ts-ignore\r\n      let position = olIconStyle.offset_ as [number, number];\r\n      // @ts-ignore\r\n      const offsetOrigin = olIconStyle.offsetOrigin_ as string;\r\n      if (offsetOrigin && offsetOrigin !== 'top-left') {\r\n        throw new Error(`Offset origin ${offsetOrigin} not supported`);\r\n      }\r\n\r\n      return {\r\n        source: olIconStyle.getSrc()!,\r\n        position,\r\n        size: size as [number, number]\r\n      };\r\n    } else {\r\n      return olIconStyle.getSrc() ? olIconStyle.getSrc() : undefined;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Get the GeoStyler-Style LineSymbolizer from an OpenLayers Style object.\r\n   *\r\n   * @param olStyle The OpenLayers Style object\r\n   * @return The GeoStyler-Style LineSymbolizer\r\n   */\r\n  getLineSymbolizerFromOlStyle(olStyle: OlStyle): LineSymbolizer {\r\n    const olStrokeStyle = olStyle.getStroke();\r\n    // getLineDash returns null not undefined. So we have to double check\r\n    const dashArray = olStrokeStyle ? olStrokeStyle.getLineDash() : undefined;\r\n\r\n    return {\r\n      kind: 'Line',\r\n      color: olStrokeStyle ? OlStyleUtil.getHexColor(olStrokeStyle.getColor() as string) as string : undefined,\r\n      opacity: olStrokeStyle ? OlStyleUtil.getOpacity(olStrokeStyle.getColor() as string) : undefined,\r\n      width: olStrokeStyle ? olStrokeStyle.getWidth() : undefined,\r\n      cap: olStrokeStyle ? <LineSymbolizer['cap']> olStrokeStyle.getLineCap() : 'butt',\r\n      join: olStrokeStyle ? <LineSymbolizer['join']> olStrokeStyle.getLineJoin() : 'miter',\r\n      dasharray: dashArray ? dashArray : undefined,\r\n      dashOffset: olStrokeStyle ? olStrokeStyle.getLineDashOffset() : undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get the GeoStyler-Style FillSymbolizer from an OpenLayers Style object.\r\n   *\r\n   * PolygonSymbolizer Stroke is just partially supported.\r\n   *\r\n   * @param olStyle The OpenLayers Style object\r\n   * @return The GeoStyler-Style FillSymbolizer\r\n   */\r\n  getFillSymbolizerFromOlStyle(olStyle: OlStyle): FillSymbolizer {\r\n    const olFillStyle = olStyle.getFill();\r\n    const olStrokeStyle = olStyle.getStroke();\r\n    // getLineDash returns null not undefined. So we have to double check\r\n    const outlineDashArray = olStrokeStyle ? olStrokeStyle.getLineDash() : undefined;\r\n\r\n    const symbolizer: FillSymbolizer = {\r\n      kind: 'Fill'\r\n    };\r\n\r\n    if (olFillStyle) {\r\n      symbolizer.color = OlStyleUtil.getHexColor(olFillStyle.getColor() as string);\r\n    }\r\n    if (olFillStyle) {\r\n      symbolizer.fillOpacity = OlStyleUtil.getOpacity(olFillStyle.getColor() as string);\r\n    }\r\n    if (olStrokeStyle) {\r\n      symbolizer.outlineColor = OlStyleUtil.getHexColor(olStrokeStyle.getColor() as string);\r\n    }\r\n    if (outlineDashArray) {\r\n      symbolizer.outlineDasharray = outlineDashArray;\r\n    }\r\n    if (olStrokeStyle) {\r\n      symbolizer.outlineOpacity = OlStyleUtil.getOpacity(olStrokeStyle.getColor() as string);\r\n    }\r\n    if (olStrokeStyle && olStrokeStyle.getWidth()) {\r\n      symbolizer.outlineWidth = olStrokeStyle.getWidth();\r\n    }\r\n    return symbolizer;\r\n\r\n  }\r\n\r\n  /**\r\n   * Get the GeoStyler-Style TextSymbolizer from an OpenLayers Style object.\r\n   *\r\n   *\r\n   * @param olStyle The OpenLayers Style object\r\n   * @return The GeoStyler-Style TextSymbolizer\r\n   */\r\n  getTextSymbolizerFromOlStyle(olStyle: OlStyle): TextSymbolizer {\r\n    const olTextStyle = olStyle.getText();\r\n    if (!olTextStyle) {\r\n      throw new Error('Could not get text from olStyle.');\r\n    }\r\n    const olFillStyle = olTextStyle.getFill();\r\n    const olStrokeStyle = olTextStyle.getStroke();\r\n    const offsetX = olTextStyle.getOffsetX();\r\n    const offsetY = olTextStyle.getOffsetY();\r\n    const font = olTextStyle.getFont();\r\n    const rotation = olTextStyle.getRotation();\r\n    const allowOverlap = olTextStyle.getOverflow() ? olTextStyle.getOverflow() : undefined;\r\n    const placement = olTextStyle.getPlacement();\r\n    const text = olTextStyle.getText();\r\n    const label = Array.isArray(text) ? text[0] : text;\r\n    let fontSize: number = Infinity;\r\n    let fontFamily: string[]|undefined = undefined;\r\n    let fontWeight: 'normal' | 'bold' | undefined = undefined;\r\n    let fontStyle: 'normal' | 'italic' | 'oblique' | undefined = undefined;\r\n    if (font) {\r\n      const fontObj = parseFont(font);\r\n      if (fontObj['font-weight']) {\r\n        fontWeight = fontObj['font-weight'];\r\n      }\r\n      if (fontObj['font-size']) {\r\n        fontSize = parseInt(fontObj['font-size'], 10);\r\n      }\r\n      if (fontObj['font-family']) {\r\n        const fontFamilies = fontObj['font-family'];\r\n        fontFamily = fontFamilies?.map((f: string) => f.includes(' ') ? '\"' + f + '\"' : f);\r\n      }\r\n      if (fontObj['font-style']) {\r\n        fontStyle = fontObj['font-style'];\r\n      }\r\n    }\r\n\r\n    return {\r\n      kind: 'Text',\r\n      label,\r\n      placement,\r\n      allowOverlap,\r\n      color: olFillStyle ? OlStyleUtil.getHexColor(olFillStyle.getColor() as string) : undefined,\r\n      size: isFinite(fontSize) ? fontSize : undefined,\r\n      font: fontFamily,\r\n      fontWeight: fontWeight || undefined,\r\n      fontStyle: fontStyle || undefined,\r\n      offset: (offsetX !== undefined) && (offsetY !== undefined) ? [offsetX, offsetY] : [0, 0],\r\n      haloColor: olStrokeStyle && olStrokeStyle.getColor() ?\r\n        OlStyleUtil.getHexColor(olStrokeStyle.getColor() as string) : undefined,\r\n      haloWidth: olStrokeStyle ? olStrokeStyle.getWidth() : undefined,\r\n      rotate: (rotation !== undefined) ? rotation / Math.PI * 180 : undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get the GeoStyler-Style Symbolizer from an OpenLayers Style object.\r\n   *\r\n   * @param olStyles The OpenLayers Style object\r\n   * @return The GeoStyler-Style Symbolizer array\r\n   */\r\n  getSymbolizersFromOlStyle(olStyles: OlStyle[]): Symbolizer[] {\r\n    const symbolizers: Symbolizer[] = [];\r\n    olStyles.forEach(olStyle => {\r\n      let symbolizer: Symbolizer;\r\n      const styleType: StyleType = this.getStyleTypeFromOlStyle(olStyle);\r\n      switch (styleType) {\r\n        case 'Point':\r\n          if (olStyle.getText() && !OlStyleUtil.getIsMarkSymbolizerFont((olStyle as any).getText().getFont())) {\r\n            symbolizer = this.getTextSymbolizerFromOlStyle(olStyle);\r\n          } else {\r\n            symbolizer = this.getPointSymbolizerFromOlStyle(olStyle);\r\n          }\r\n          break;\r\n        case 'Line':\r\n          symbolizer = this.getLineSymbolizerFromOlStyle(olStyle);\r\n          break;\r\n        case 'Fill':\r\n          symbolizer = this.getFillSymbolizerFromOlStyle(olStyle);\r\n          break;\r\n        default:\r\n          throw new Error('Failed to parse SymbolizerKind from OpenLayers Style');\r\n      }\r\n      symbolizers.push(symbolizer);\r\n    });\r\n\r\n    return symbolizers;\r\n  }\r\n\r\n  /**\r\n   * Get the GeoStyler-Style Rule from an OpenLayers Style object.\r\n   *\r\n   * @param olStyles The OpenLayers Style object\r\n   * @return The GeoStyler-Style Rule\r\n   */\r\n  getRuleFromOlStyle(olStyles: OlStyle | OlStyle[]): Rule {\r\n    let symbolizers: Symbolizer[];\r\n    const name = 'OL Style Rule 0';\r\n\r\n    if (Array.isArray(olStyles)) {\r\n      symbolizers = this.getSymbolizersFromOlStyle(olStyles);\r\n    } else {\r\n      symbolizers = this.getSymbolizersFromOlStyle([olStyles]);\r\n    }\r\n\r\n    return {\r\n      name, symbolizers\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get the GeoStyler-Style Symbolizer from an OpenLayers Style object.\r\n   *\r\n   * @param olStyle The OpenLayers Style object\r\n   * @return The GeoStyler-Style Symbolizer\r\n   */\r\n  getStyleTypeFromOlStyle(olStyle: OlStyle): StyleType {\r\n    let styleType: StyleType;\r\n\r\n    if (olStyle.getImage() instanceof this.OlStyleImageConstructor) {\r\n      styleType = 'Point';\r\n    } else if (olStyle.getText() instanceof this.OlStyleTextConstructor) {\r\n      styleType = 'Point';\r\n    } else if (olStyle.getFill() instanceof this.OlStyleFillConstructor) {\r\n      styleType = 'Fill';\r\n    } else if (olStyle.getStroke() && !olStyle.getFill()) {\r\n      styleType = 'Line';\r\n    } else {\r\n      throw new Error('StyleType could not be detected');\r\n    }\r\n\r\n    return styleType;\r\n  }\r\n\r\n  /**\r\n   * Get the GeoStyler-Style Style from an OpenLayers Style object.\r\n   *\r\n   * @param olStyle The OpenLayers Style object\r\n   * @return The GeoStyler-Style Style\r\n   */\r\n  olStyleToGeoStylerStyle(olStyle: OlStyle | OlStyle[]): Style {\r\n    const name = 'OL Style';\r\n    const rule = this.getRuleFromOlStyle(olStyle);\r\n    return {\r\n      name,\r\n      rules: [rule]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * The readStyle implementation of the GeoStyler-Style StyleParser interface.\r\n   * It reads an OpenLayers Style, an array of OpenLayers Styles or an olParserStyleFct and returns a Promise.\r\n   *\r\n   * The Promise itself resolves with a GeoStyler-Style Style.\r\n   *\r\n   * @param olStyle The style to be parsed\r\n   * @return The Promise resolving with the GeoStyler-Style Style\r\n   */\r\n  readStyle(olStyle: OlStyleLike): Promise<ReadStyleResult> {\r\n    return new Promise<ReadStyleResult>((resolve) => {\r\n      try {\r\n        if (this.isOlParserStyleFct(olStyle)) {\r\n          resolve({\r\n            output: olStyle.__geoStylerStyle\r\n          });\r\n        } else {\r\n          olStyle = olStyle as OlStyle | OlStyle[];\r\n          const geoStylerStyle: Style = this.olStyleToGeoStylerStyle(olStyle);\r\n          const unsupportedProperties = this.checkForUnsupportedProperties(geoStylerStyle);\r\n          resolve({\r\n            output: geoStylerStyle,\r\n            unsupportedProperties\r\n          });\r\n        }\r\n      } catch (error) {\r\n        resolve({\r\n          errors: [error]\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The writeStyle implementation of the GeoStyler-Style StyleParser interface.\r\n   * It reads a GeoStyler-Style Style and returns a Promise.\r\n   * The Promise itself resolves one of three types\r\n   *\r\n   * 1. OlStyle if input Style consists of\r\n   *    one rule with one symbolizer, no filter, no scaleDenominator, no TextSymbolizer\r\n   * 2. OlStyle[] if input Style consists of\r\n   *    one rule with multiple symbolizers, no filter, no scaleDenominator, no TextSymbolizer\r\n   * 3. OlParserStyleFct for everything else\r\n   *\r\n   * @param geoStylerStyle A GeoStyler-Style Style.\r\n   * @return The Promise resolving with one of above mentioned style types.\r\n   */\r\n  writeStyle(geoStylerStyle: Style): Promise<WriteStyleResult<OlStyle | OlStyle[] | OlParserStyleFct>> {\r\n    return new Promise<WriteStyleResult>(async (resolve) => {\r\n      const clonedStyle = structuredClone(geoStylerStyle);\r\n      const unsupportedProperties = this.checkForUnsupportedProperties(clonedStyle);\r\n      try {\r\n        const olStyle = await this.getOlStyleTypeFromGeoStylerStyle(clonedStyle);\r\n        resolve({\r\n          output: olStyle,\r\n          unsupportedProperties,\r\n          warnings: unsupportedProperties && ['Your style contains unsupportedProperties!']\r\n        });\r\n      } catch (error) {\r\n        resolve({\r\n          errors: [error]\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  checkForUnsupportedProperties(geoStylerStyle: Style): UnsupportedProperties | undefined {\r\n    const capitalizeFirstLetter = (a: string) => a[0].toUpperCase() + a.slice(1);\r\n    const unsupportedProperties: UnsupportedProperties = {};\r\n    geoStylerStyle.rules.forEach(rule => {\r\n      // ScaleDenominator and Filters are completly supported so we just check for symbolizers\r\n      rule.symbolizers.forEach(symbolizer => {\r\n        const key = capitalizeFirstLetter(`${symbolizer.kind}Symbolizer`);\r\n        const value = this.unsupportedProperties?.Symbolizer?.[key as SymbolizerKeyType];\r\n        if (value) {\r\n          if (typeof value === 'string') {\r\n            if (!unsupportedProperties.Symbolizer) {\r\n              unsupportedProperties.Symbolizer = {};\r\n            }\r\n            unsupportedProperties.Symbolizer[key as SymbolizerKeyType] = value;\r\n          } else {\r\n            Object.keys(symbolizer).forEach(property => {\r\n              if (value[property]) {\r\n                if (!unsupportedProperties.Symbolizer) {\r\n                  unsupportedProperties.Symbolizer = {};\r\n                }\r\n                if (!unsupportedProperties.Symbolizer[key as SymbolizerKeyType]) {\r\n                  (unsupportedProperties.Symbolizer as any)[key] = {};\r\n                }\r\n                unsupportedProperties.Symbolizer\r\n                  [key as SymbolizerKeyType][property] = value[property];\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    });\r\n    if (Object.keys(unsupportedProperties).length > 0) {\r\n      return unsupportedProperties;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Decides which OlStyleType should be returned depending on given geoStylerStyle.\r\n   * Three OlStyleTypes are possible:\r\n   *\r\n   * 1. OlStyle if input Style consists of\r\n   *    one rule with one symbolizer, no filter, no scaleDenominator, no TextSymbolizer\r\n   * 2. OlStyle[] if input Style consists of\r\n   *    one rule with multiple symbolizers, no filter, no scaleDenominator, no TextSymbolizer\r\n   * 3. OlParserStyleFct for everything else\r\n   *\r\n   * @param geoStylerStyle A GeoStyler-Style Style\r\n   */\r\n  async getOlStyleTypeFromGeoStylerStyle(geoStylerStyle: Style): Promise<OlStyle | OlParserStyleFct | OlStyle[]> {\r\n    const rules = geoStylerStyle.rules;\r\n    const nrRules = rules.length;\r\n    if (nrRules === 1) {\r\n      const hasFilter = geoStylerStyle?.rules?.[0]?.filter !== undefined ? true : false;\r\n      const hasMinScale = geoStylerStyle?.rules?.[0]?.scaleDenominator?.min !== undefined ? true : false;\r\n      const hasMaxScale = geoStylerStyle?.rules?.[0]?.scaleDenominator?.max !== undefined ? true : false;\r\n      const hasScaleDenominator = hasMinScale || hasMaxScale ? true : false;\r\n      const hasFunctions = OlStyleUtil.containsGeoStylerFunctions(geoStylerStyle);\r\n\r\n      const nrSymbolizers = geoStylerStyle.rules[0].symbolizers.length;\r\n      const hasTextSymbolizer = rules[0].symbolizers.some((symbolizer: Symbolizer) => {\r\n        return symbolizer.kind === 'Text';\r\n      });\r\n      const hasDynamicIconSymbolizer = rules[0].symbolizers.some((symbolizer: Symbolizer) => {\r\n        return symbolizer.kind === 'Icon' && typeof(symbolizer.image) === 'string' && symbolizer.image.includes('{{');\r\n      });\r\n      if (!hasFilter && !hasScaleDenominator && !hasTextSymbolizer && !hasDynamicIconSymbolizer && !hasFunctions) {\r\n        if (nrSymbolizers === 1) {\r\n          return await this.geoStylerStyleToOlStyle(geoStylerStyle);\r\n        } else {\r\n          return await this.geoStylerStyleToOlStyleArray(geoStylerStyle);\r\n        }\r\n      } else {\r\n        return await this.geoStylerStyleToOlParserStyleFct(geoStylerStyle);\r\n      }\r\n    } else {\r\n      return await this.geoStylerStyleToOlParserStyleFct(geoStylerStyle);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the first symbolizer of the first rule of a GeoStyler-Style Style.\r\n   *\r\n   * @param geoStylerStyle GeoStyler-Style Style\r\n   * @return An OpenLayers Style Object\r\n   */\r\n  async geoStylerStyleToOlStyle(geoStylerStyle: Style): Promise<OlStyle> {\r\n    const rule = geoStylerStyle.rules[0];\r\n    const symbolizer = rule.symbolizers[0];\r\n    const olSymbolizer = await this.getOlSymbolizerFromSymbolizer(symbolizer);\r\n    return olSymbolizer;\r\n  }\r\n\r\n  /**\r\n   * Parses all symbolizers of the first rule of a GeoStyler-Style Style.\r\n   *\r\n   * @param geoStylerStyle GeoStyler-Style Style\r\n   * @return An array of OpenLayers Style Objects\r\n   */\r\n  async geoStylerStyleToOlStyleArray(geoStylerStyle: Style): Promise<OlStyle[]> {\r\n    const rule = geoStylerStyle.rules[0];\r\n    const olStyles: any[] = [];\r\n    for (const symbolizer of rule.symbolizers) {\r\n      const olSymbolizer: any = await this.getOlSymbolizerFromSymbolizer(symbolizer);\r\n      olStyles.push(olSymbolizer);\r\n    };\r\n    return olStyles;\r\n  }\r\n\r\n  /**\r\n   * Get the OpenLayers Style object from an GeoStyler-Style Style\r\n   *\r\n   * @param geoStylerStyle A GeoStyler-Style Style.\r\n   * @return An OlParserStyleFct\r\n   */\r\n  async geoStylerStyleToOlParserStyleFct(geoStylerStyle: Style): Promise<OlParserStyleFct> {\r\n    const rules = structuredClone(geoStylerStyle.rules);\r\n    const olStyle = async (feature: any, resolution: number): Promise<any[]> => {\r\n      const styles: any[] = [];\r\n\r\n      // calculate scale for resolution (from ol-util MapUtil)\r\n      const dpi = 25.4 / 0.28;\r\n      const mpu = METERS_PER_UNIT.m;\r\n      const inchesPerMeter = 39.37;\r\n      const scale = resolution * mpu * inchesPerMeter * dpi;\r\n\r\n      for (const rule of rules) {\r\n        // handling scale denominator\r\n        let minScale = rule?.scaleDenominator?.min;\r\n        let maxScale = rule?.scaleDenominator?.max;\r\n        let isWithinScale = true;\r\n        if (minScale || maxScale) {\r\n          minScale = isGeoStylerFunction(minScale) ? OlStyleUtil.evaluateNumberFunction(minScale) : minScale;\r\n          maxScale = isGeoStylerFunction(maxScale) ? OlStyleUtil.evaluateNumberFunction(maxScale) : maxScale;\r\n          if (minScale && scale < minScale) {\r\n            isWithinScale = false;\r\n          }\r\n          if (maxScale && scale >= maxScale) {\r\n            isWithinScale = false;\r\n          }\r\n        }\r\n\r\n        // handling filter\r\n        let matchesFilter: boolean = false;\r\n        if (!rule.filter) {\r\n          matchesFilter = true;\r\n        } else {\r\n          try {\r\n            matchesFilter = this.geoStylerFilterToOlParserFilter(feature, rule.filter);\r\n          } catch (e) {\r\n            matchesFilter = false;\r\n          }\r\n        }\r\n\r\n        if (isWithinScale && matchesFilter) {\r\n          for (const symb of rule.symbolizers) {\r\n            if (symb.visibility === false) {\r\n              styles.push(null);\r\n            }\r\n\r\n            if (isGeoStylerBooleanFunction(symb.visibility)) {\r\n              const visibility = OlStyleUtil.evaluateBooleanFunction(symb.visibility);\r\n              if (!visibility) {\r\n                styles.push(null);\r\n              }\r\n            }\r\n\r\n            const olSymbolizer: any = await this.getOlSymbolizerFromSymbolizer(symb, feature);\r\n            // either an OlStyle or an ol.StyleFunction. OpenLayers only accepts an array\r\n            // of OlStyles, not ol.StyleFunctions.\r\n            // So we have to check it and in case of an ol.StyleFunction call that function\r\n            // and add the returned style to const styles.\r\n            if (typeof olSymbolizer !== 'function') {\r\n              styles.push(olSymbolizer);\r\n            } else {\r\n              const styleFromFct: any = olSymbolizer(feature, resolution);\r\n              styles.push(styleFromFct);\r\n            }\r\n          };\r\n        }\r\n      };\r\n      return styles;\r\n    };\r\n    const olStyleFct: OlParserStyleFct = olStyle as OlParserStyleFct;\r\n    olStyleFct.__geoStylerStyle = geoStylerStyle;\r\n    return olStyleFct;\r\n  }\r\n\r\n  /**\r\n   * Checks if a feature matches given filter expression(s)\r\n   * @param feature ol.Feature\r\n   * @param filter Filter\r\n   * @return boolean true if feature matches filter expression\r\n   */\r\n  geoStylerFilterToOlParserFilter(feature: any, filter: Filter): boolean {\r\n    const operatorMapping: any = {\r\n      '&&': true,\r\n      '||': true,\r\n      '!': true\r\n    };\r\n\r\n    let matchesFilter: boolean = true;\r\n    if (isGeoStylerBooleanFunction(filter)) {\r\n      return OlStyleUtil.evaluateBooleanFunction(filter, feature);\r\n    }\r\n    if (filter === true || filter === false) {\r\n      return filter;\r\n    }\r\n    const operator: Operator = filter[0];\r\n    let isNestedFilter: boolean = false;\r\n    if (operatorMapping[operator]) {\r\n      isNestedFilter = true;\r\n    }\r\n    try {\r\n      if (isNestedFilter) {\r\n        let intermediate: boolean;\r\n        let restFilter: any;\r\n        switch (filter[0]) {\r\n          case '&&':\r\n            intermediate = true;\r\n            restFilter = filter.slice(1);\r\n            restFilter.forEach((f: Filter) => {\r\n              if (!this.geoStylerFilterToOlParserFilter(feature, f)) {\r\n                intermediate = false;\r\n              }\r\n            });\r\n            matchesFilter = intermediate;\r\n            break;\r\n          case '||':\r\n            intermediate = false;\r\n            restFilter = filter.slice(1);\r\n            restFilter.forEach((f: Filter) => {\r\n              if (this.geoStylerFilterToOlParserFilter(feature, f)) {\r\n                intermediate = true;\r\n              }\r\n            });\r\n            matchesFilter = intermediate;\r\n            break;\r\n          case '!':\r\n            matchesFilter = !this.geoStylerFilterToOlParserFilter(feature, filter[1]);\r\n            break;\r\n          default:\r\n            throw new Error('Cannot parse Filter. Unknown combination or negation operator.');\r\n        }\r\n      } else {\r\n        let arg1: any;\r\n        if (isGeoStylerFunction(filter[1])) {\r\n          arg1 = OlStyleUtil.evaluateFunction(filter[1], feature);\r\n        } else {\r\n          arg1 = feature.get(filter[1]);\r\n        }\r\n        let arg2: any;\r\n        if (isGeoStylerFunction(filter[2])) {\r\n          arg2 = OlStyleUtil.evaluateFunction(filter[2], feature);\r\n        } else {\r\n          arg2 = filter[2];\r\n        }\r\n        switch (filter[0]) {\r\n          case '==':\r\n            matchesFilter = ('' + arg1) === ('' + arg2);\r\n            break;\r\n          case '*=':\r\n            // inspired by\r\n            // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/String/includes#Polyfill\r\n            if (typeof arg2 === 'string' && typeof arg1 === 'string') {\r\n              if (arg2.length > arg1.length) {\r\n                matchesFilter = false;\r\n              } else {\r\n                matchesFilter = arg1.indexOf(arg2) !== -1;\r\n              }\r\n            }\r\n            break;\r\n          case '!=':\r\n            matchesFilter = ('' + arg1) !== ('' + arg2);\r\n            break;\r\n          case '<':\r\n            matchesFilter = Number(arg1) < Number(arg2);\r\n            break;\r\n          case '<=':\r\n            matchesFilter = Number(arg1) <= Number(arg2);\r\n            break;\r\n          case '>':\r\n            matchesFilter = Number(arg1) > Number(arg2);\r\n            break;\r\n          case '>=':\r\n            matchesFilter = Number(arg1) >= Number(arg2);\r\n            break;\r\n          default:\r\n            throw new Error('Cannot parse Filter. Unknown comparison operator.');\r\n        }\r\n      }\r\n    } catch (e) {\r\n      throw new Error('Cannot parse Filter. Invalid structure.');\r\n    }\r\n    return matchesFilter;\r\n  }\r\n\r\n  /**\r\n   * Get the OpenLayers Style object or an OL StyleFunction from an\r\n   * GeoStyler-Style Symbolizer.\r\n   *\r\n   * @param symbolizer A GeoStyler-Style Symbolizer.\r\n   * @return The OpenLayers Style object or a StyleFunction\r\n   */\r\n  async getOlSymbolizerFromSymbolizer(symbolizer: Symbolizer, feature?: OlFeature): Promise<OlStyle> {\r\n    let olSymbolizer: any;\r\n    symbolizer = structuredClone(symbolizer);\r\n\r\n    switch (symbolizer.kind) {\r\n      case 'Mark':\r\n        olSymbolizer = await this.getOlPointSymbolizerFromMarkSymbolizer(symbolizer, feature);\r\n        break;\r\n      case 'Icon':\r\n        olSymbolizer = await this.getOlIconSymbolizerFromIconSymbolizer(symbolizer, feature);\r\n        break;\r\n      case 'Text':\r\n        olSymbolizer = this.getOlTextSymbolizerFromTextSymbolizer(symbolizer, feature);\r\n        break;\r\n      case 'Line':\r\n        olSymbolizer = this.getOlLineSymbolizerFromLineSymbolizer(symbolizer, feature);\r\n        break;\r\n      case 'Fill':\r\n        olSymbolizer = await this.getOlPolygonSymbolizerFromFillSymbolizer(symbolizer, feature);\r\n        break;\r\n      default:\r\n        // Return the OL default style since the TS type binding does not allow\r\n        // us to set olSymbolizer to undefined\r\n        const fill = new this.OlStyleFillConstructor({\r\n          color: 'rgba(255,255,255,0.4)'\r\n        });\r\n        const stroke = new this.OlStyleStrokeConstructor({\r\n          color: '#3399CC',\r\n          width: 1.25\r\n        });\r\n        olSymbolizer = new this.OlStyleConstructor({\r\n          image: new this.OlStyleCircleConstructor({\r\n            fill: fill,\r\n            stroke: stroke,\r\n            radius: 5\r\n          }),\r\n          fill: fill,\r\n          stroke: stroke\r\n        });\r\n        break;\r\n    }\r\n\r\n    return olSymbolizer;\r\n  }\r\n\r\n  /**\r\n   * Get the OL Style object  from an GeoStyler-Style MarkSymbolizer.\r\n   *\r\n   * @param markSymbolizer A GeoStyler-Style MarkSymbolizer.\r\n   * @return The OL Style object\r\n   */\r\n  async getOlPointSymbolizerFromMarkSymbolizer(markSymbolizer: MarkSymbolizer, feature?: OlFeature): Promise<OlStyle> {\r\n    for (const key of Object.keys(markSymbolizer)) {\r\n      if (isGeoStylerFunction(markSymbolizer[key as keyof MarkSymbolizer])) {\r\n        (markSymbolizer as any)[key] = OlStyleUtil.evaluateFunction((markSymbolizer as any)[key], feature);\r\n      }\r\n    }\r\n\r\n    const strokeColor = markSymbolizer.strokeColor as string;\r\n    const strokeOpacity = markSymbolizer.strokeOpacity as number;\r\n    const strokeWidth = markSymbolizer.strokeWidth as number;\r\n    const fillColor = markSymbolizer.color as string;\r\n    const fillOpacity = markSymbolizer.fillOpacity as number;\r\n    const rotation = (Number(markSymbolizer.rotate) * Math.PI) / 180;\r\n    const displacement = markSymbolizer.offset as [number, number];\r\n\r\n    let olStyle: OlStyle;\r\n\r\n    let shape = removeDuplicateShapes(markSymbolizer.wellKnownName);\r\n\r\n    if (isPointSvgDefined(shape)) {\r\n      const dimensions = (markSymbolizer?.radius as number ?? 6) * 2;  // Default to 12 pixels\r\n      const opacity = markSymbolizer.opacity as number;\r\n\r\n      const svgOpts: SvgOptions = {\r\n        dimensions,\r\n        ...fillColor && { fill: fillColor },\r\n        ...OlStyleUtil.checkOpacity(fillOpacity) && { fillOpacity },\r\n        ...strokeColor && { stroke: strokeColor },\r\n        ...strokeWidth && { strokeWidth },\r\n        ...OlStyleUtil.checkOpacity(strokeOpacity) && { strokeOpacity }\r\n      };\r\n\r\n      const svg = getShapeSvg(shape, svgOpts);\r\n\r\n      olStyle = new this.OlStyleConstructor({\r\n        image: new this.OlStyleIconConstructor({\r\n          src: OlStyleUtil.getBase64EncodedSvg(svg),\r\n          crossOrigin: 'anonymous',\r\n          ...displacement && { displacement },\r\n          ...OlStyleUtil.checkOpacity(opacity) && { opacity },\r\n          ...rotation && { rotation },\r\n          scale: 1,\r\n        }),\r\n      });\r\n    } else if (OlStyleUtil.getIsFontGlyphBased(markSymbolizer)) {\r\n      const strokeRgbaColor = (strokeColor && strokeOpacity ?\r\n        OlStyleUtil.getRgbaColor(strokeColor, strokeOpacity) :\r\n        strokeColor) as string;\r\n      const fillRgbaColor = (fillColor && fillOpacity ?\r\n        OlStyleUtil.getRgbaColor(fillColor, fillOpacity) :\r\n        fillColor) as string;\r\n\r\n      const stroke = new this.OlStyleStrokeConstructor({\r\n        ...strokeRgbaColor && { color: strokeRgbaColor as string },\r\n        ...strokeWidth && { width: strokeWidth }\r\n      });\r\n\r\n      const fill = new this.OlStyleFillConstructor({\r\n        ...fillRgbaColor && { color: fillRgbaColor as string }\r\n      });\r\n\r\n      olStyle = new this.OlStyleConstructor({\r\n        text: new this.OlStyleTextConstructor({\r\n          text: OlStyleUtil.getCharacterForMarkSymbolizer(markSymbolizer),\r\n          font: OlStyleUtil.getTextFontForMarkSymbolizer(markSymbolizer),\r\n          ...fill && { fill },\r\n          ...displacement && { offsetX: displacement[0] },\r\n          ...displacement && { offsetY: displacement[1] },\r\n          ...stroke && { stroke },\r\n          ...rotation && { rotation },\r\n        })\r\n      });\r\n    } else {\r\n      throw new Error('MarkSymbolizer cannot be parsed. Unsupported WellKnownName.');\r\n    }\r\n\r\n    return olStyle;\r\n  }\r\n\r\n  /**\r\n   * Get the OL Style object  from an GeoStyler-Style IconSymbolizer.\r\n   *\r\n   * @param symbolizer  A GeoStyler-Style IconSymbolizer.\r\n   * @return The OL Style object\r\n   */\r\n  async getOlIconSymbolizerFromIconSymbolizer(\r\n    symbolizer: IconSymbolizer,\r\n    feat?: OlFeature\r\n  ): Promise<OlStyle | OlStyleIcon | OlStyleFunction> {\r\n    for (const key of Object.keys(symbolizer)) {\r\n      if (isGeoStylerFunction(symbolizer[key as keyof IconSymbolizer])) {\r\n        (symbolizer as any)[key] = OlStyleUtil.evaluateFunction((symbolizer as any)[key], feat);\r\n      }\r\n    }\r\n\r\n    const baseProps: OlStyleIconOptions = {\r\n      src: isSprite(symbolizer.image) ? symbolizer.image.source as string : symbolizer.image as string,\r\n      crossOrigin: 'anonymous',\r\n      opacity: symbolizer.opacity as number,\r\n      width: symbolizer.size as number,\r\n      // Rotation in openlayers is radians while we use degree\r\n      rotation: (typeof(symbolizer.rotate) === 'number' ? symbolizer.rotate * Math.PI / 180 : undefined) as number,\r\n      displacement: symbolizer.offset as [number, number],\r\n      size: isSprite(symbolizer.image) ? symbolizer.image.size as [number, number] : undefined,\r\n      offset: isSprite(symbolizer.image) ? symbolizer.image.position as [number, number] : undefined,\r\n    };\r\n\r\n    // check if IconSymbolizer.image contains a placeholder\r\n    const prefix = '\\\\{\\\\{';\r\n    const suffix = '\\\\}\\\\}';\r\n    const regExp = new RegExp(prefix + '.*?' + suffix, 'g');\r\n    const regExpRes = typeof(symbolizer.image) === 'string' ? symbolizer.image.match(regExp) : null;\r\n    if (regExpRes) {\r\n      // if it contains a placeholder\r\n      // return olStyleFunction\r\n      const olPointStyledIconFn = (feature: any) => {\r\n        let src: string = OlStyleUtil.resolveAttributeTemplate(feature, symbolizer.image as string, '');\r\n        // src can't be blank, would trigger ol errors\r\n        if (!src) {\r\n          src = symbolizer.image + '';\r\n        }\r\n        let image;\r\n        if (this.olIconStyleCache[src]) {\r\n          image = this.olIconStyleCache[src];\r\n          if (baseProps.rotation !== undefined) {\r\n            image.setRotation(baseProps.rotation);\r\n          }\r\n          if (baseProps.opacity !== undefined) {\r\n            image.setOpacity(baseProps.opacity);\r\n          }\r\n        } else {\r\n          image = new this.OlStyleIconConstructor({\r\n            ...baseProps,\r\n            src // order is important\r\n          });\r\n          this.olIconStyleCache[src] = image;\r\n        }\r\n        const style = new this.OlStyleConstructor({\r\n          image\r\n        });\r\n        return style;\r\n      };\r\n      return olPointStyledIconFn;\r\n    } else {\r\n      return new this.OlStyleConstructor({\r\n        image: new this.OlStyleIconConstructor({\r\n          ...baseProps\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the OL Style object from an GeoStyler-Style LineSymbolizer.\r\n   *\r\n   * @param symbolizer A GeoStyler-Style LineSymbolizer.\r\n   * @return The OL Style object\r\n   */\r\n  getOlLineSymbolizerFromLineSymbolizer(symbolizer: LineSymbolizer, feat?: OlFeature): OlStyle | OlStyleStroke {\r\n    for (const key of Object.keys(symbolizer)) {\r\n      if (isGeoStylerFunction(symbolizer[key as keyof LineSymbolizer])) {\r\n        (symbolizer as any)[key] = OlStyleUtil.evaluateFunction((symbolizer as any)[key], feat);\r\n      }\r\n    }\r\n    const color = symbolizer.color as string;\r\n    const opacity = symbolizer.opacity as number;\r\n    const sColor = (color && opacity !== null && opacity !== undefined) ?\r\n      OlStyleUtil.getRgbaColor(color, opacity) : color;\r\n\r\n    return new this.OlStyleConstructor({\r\n      stroke: new this.OlStyleStrokeConstructor({\r\n        color: sColor,\r\n        width: symbolizer.width as number,\r\n        lineCap: symbolizer.cap as CapType,\r\n        lineJoin: symbolizer.join as JoinType,\r\n        lineDash: symbolizer.dasharray as number[],\r\n        lineDashOffset: symbolizer.dashOffset as number\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the OL Style object from an GeoStyler-Style FillSymbolizer.\r\n   *\r\n   * @param symbolizer A GeoStyler-Style FillSymbolizer.\r\n   * @return The OL Style object\r\n   */\r\n  async getOlPolygonSymbolizerFromFillSymbolizer(symbolizer: FillSymbolizer, feat?: OlFeature):\r\n      Promise<OlStyle | OlStyleFill> {\r\n    for (const key of Object.keys(symbolizer)) {\r\n      if (isGeoStylerFunction(symbolizer[key as keyof FillSymbolizer])) {\r\n        (symbolizer as any)[key] = OlStyleUtil.evaluateFunction((symbolizer as any)[key], feat);\r\n      }\r\n    }\r\n\r\n    const color = symbolizer.color as string;\r\n    const opacity = symbolizer.fillOpacity as number;\r\n    const fColor = color && Number.isFinite(opacity)\r\n      ? OlStyleUtil.getRgbaColor(color, opacity)\r\n      : color;\r\n\r\n    let fill = color\r\n      ? new this.OlStyleFillConstructor({color: fColor})\r\n      : undefined;\r\n\r\n    const outlineColor = symbolizer.outlineColor as string;\r\n    const outlineOpacity = symbolizer.outlineOpacity as number;\r\n    const oColor = (outlineColor && Number.isFinite(outlineOpacity))\r\n      ? OlStyleUtil.getRgbaColor(outlineColor, outlineOpacity)\r\n      : outlineColor;\r\n\r\n    const stroke = outlineColor || symbolizer.outlineWidth ? new this.OlStyleStrokeConstructor({\r\n      color: oColor,\r\n      width: symbolizer.outlineWidth as number,\r\n      lineDash: symbolizer.outlineDasharray as number[],\r\n    }) : undefined;\r\n\r\n    const olStyle = new this.OlStyleConstructor({\r\n      fill,\r\n      stroke\r\n    });\r\n\r\n    if (symbolizer.graphicFill) {\r\n      const pattern = this.getOlPatternFromGraphicFill(symbolizer.graphicFill);\r\n      if (!fill) {\r\n        fill = new this.OlStyleFillConstructor({});\r\n      }\r\n      if (pattern) {\r\n        fill.setColor(await pattern);\r\n      }\r\n      olStyle.setFill(fill);\r\n    }\r\n\r\n    return olStyle;\r\n  }\r\n\r\n  /**\r\n   * Get the pattern for a graphicFill.\r\n   *\r\n   * This creates a CanvasPattern based on the\r\n   * properties of the given PointSymbolizer. Currently,\r\n   * only IconSymbolizer and MarkSymbolizer are supported.\r\n   *\r\n   * @param graphicFill The Symbolizer that holds the pattern config.\r\n   * @returns The created CanvasPattern, or null.\r\n   */\r\n  async getOlPatternFromGraphicFill(graphicFill: PointSymbolizer): Promise<CanvasPattern | null> {\r\n    return new Promise(async (resolve, reject) => {\r\n      let graphicFillStyle: any;\r\n      let iconSize: [number, number] = [16, 16];\r\n      let iconSpacing = 1;\r\n      let scaleFactor = 1;\r\n      if (isIconSymbolizer(graphicFill)) {\r\n        graphicFillStyle = await this.getOlIconSymbolizerFromIconSymbolizer(graphicFill);\r\n        iconSize = graphicFillStyle.getSize();\r\n      } else if (isMarkSymbolizer(graphicFill)) {\r\n        graphicFillStyle = await this.getOlPointSymbolizerFromMarkSymbolizer(graphicFill);\r\n        const iconSvg = OlStyleUtil.getBase64DecodedSvg(graphicFillStyle.getImage().getSrc());\r\n        const { id, dimensions } = getSvgProperties(iconSvg);\r\n        if (dimensions) {\r\n          iconSize = [dimensions, dimensions];\r\n          // Hack to try to join lines for hatch patterns, but space out icon patterns.\r\n          // Diagonal lines still do not render nicely in the corners, due to tiling.\r\n          // TODO: Maybe use VendorOption's to control spacing?\r\n          if (LINE_WELLKNOWNNAMES.includes(String(id))) {\r\n            const iconRotation = graphicFillStyle.getImage().getRotation();\r\n            const isNotVerticalOrHorizontal = (iconRotation / (Math.PI / 2)) % 1 !== 0;\r\n            if (isNotVerticalOrHorizontal) {\r\n              scaleFactor = Math.abs(Math.cos(iconRotation)) + Math.abs(Math.sin(iconRotation));\r\n            }\r\n          } else {\r\n            iconSpacing = 2;\r\n          };\r\n        }\r\n      } else {\r\n        reject(new Error('Unrecognised graphicFill type'));\r\n        return;\r\n      }\r\n\r\n      const iconImage = graphicFillStyle.getImage();\r\n      const canvasSize = iconSize.map(item  => item * iconSpacing);\r\n\r\n      // Temporary canvas.\r\n      // TODO: Can/should we reuse an pre-existing one for efficiency?\r\n      const tmpCanvas: HTMLCanvasElement = document.createElement('canvas');\r\n      tmpCanvas.width = canvasSize[0];\r\n      tmpCanvas.height = canvasSize[1];\r\n      const tmpContext = tmpCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n      // Create the context where we'll be drawing the style on\r\n      const vectorContext = toContext(tmpContext, {\r\n        size: canvasSize,\r\n        pixelRatio: 1\r\n      });\r\n\r\n      const pointCoords = canvasSize.map(item  => item / 2);\r\n      const pointFeature = new OlFeature(new OlGeomPoint(pointCoords));\r\n\r\n      const patternImage = new Image(\r\n        iconSize[0],\r\n        iconSize[1]\r\n      );\r\n      patternImage.crossOrigin = 'anonymous';\r\n      patternImage.src = iconImage.getSrc();\r\n\r\n      const iconStyle = new OlStyleIcon({\r\n        crossOrigin: 'anonymous',\r\n        img: patternImage,\r\n        scale: scaleFactor,\r\n        size: iconSize,\r\n        rotation: iconImage.getRotation()\r\n      });\r\n\r\n      const pointStyle = new OlStyle({\r\n        image: iconStyle\r\n      });\r\n\r\n      patternImage.onload = () => {\r\n        iconStyle.load();\r\n\r\n        vectorContext.drawFeature(pointFeature, pointStyle);\r\n\r\n        // Create a repeating pattern from the canvas\r\n        const pattern = tmpContext.createPattern(tmpCanvas, 'repeat');\r\n\r\n        if (!pattern) {\r\n          reject(new Error('Failed to create pattern'));\r\n          return;\r\n        }\r\n\r\n        // Resolve the pattern so it can be used elsewhere\r\n        resolve(pattern);\r\n        return;\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the OL StyleFunction object from an GeoStyler-Style TextSymbolizer.\r\n   *\r\n   * @param {TextSymbolizer} textSymbolizer A GeoStyler-Style TextSymbolizer.\r\n   * @return {object} The OL StyleFunction\r\n   */\r\n  getOlTextSymbolizerFromTextSymbolizer(\r\n    symbolizer: TextSymbolizer,\r\n    feat?: OlFeature\r\n  ): OlStyle | OlStyleText | OlStyleFunction {\r\n    for (const key of Object.keys(symbolizer)) {\r\n      if (isGeoStylerFunction(symbolizer[key as keyof TextSymbolizer])) {\r\n        (symbolizer as any)[key] = OlStyleUtil.evaluateFunction((symbolizer as any)[key], feat);\r\n      }\r\n    }\r\n    const color = symbolizer.color as string;\r\n    let placement = symbolizer.placement;\r\n    if (!placement) {\r\n      // When setting placement it must not be undefined.\r\n      // So we set it to the OL default value.\r\n      placement = 'point';\r\n    }\r\n    if (placement === 'line-center') {\r\n      // line-center not supported by OL.\r\n      // So we use the closest supported value.\r\n      placement = 'line';\r\n    }\r\n    const opacity = symbolizer.opacity as number;\r\n    const fColor = color && Number.isFinite(opacity)\r\n      ? OlStyleUtil.getRgbaColor(color, opacity)\r\n      : color;\r\n\r\n    const haloColor = symbolizer.haloColor as string;\r\n    const haloWidth = symbolizer.haloWidth as number;\r\n    const sColor = haloColor && Number.isFinite(opacity)\r\n      ? OlStyleUtil.getRgbaColor(haloColor, opacity)\r\n      : haloColor;\r\n    const baseProps: OlStyleTextOptions = {\r\n      font: OlStyleUtil.getTextFont(symbolizer),\r\n      fill: new this.OlStyleFillConstructor({\r\n        color: fColor\r\n      }),\r\n      stroke: new this.OlStyleStrokeConstructor({\r\n        color: sColor,\r\n        width: haloWidth ? haloWidth : 0 as number\r\n      }),\r\n      overflow: symbolizer.allowOverlap as boolean,\r\n      offsetX: (symbolizer.offset ? symbolizer.offset[0] : 0) as number,\r\n      offsetY: (symbolizer.offset ? symbolizer.offset[1] : 0) as number,\r\n      rotation: typeof(symbolizer.rotate) === 'number' ? symbolizer.rotate * Math.PI / 180 : undefined,\r\n      placement: placement as 'line' | 'point'\r\n      // TODO check why props match\r\n      // textAlign: symbolizer.pitchAlignment,\r\n      // textBaseline: symbolizer.anchor\r\n    };\r\n\r\n    // check if TextSymbolizer.label contains a placeholder\r\n    const prefix = '\\\\{\\\\{';\r\n    const suffix = '\\\\}\\\\}';\r\n    const regExp = new RegExp(prefix + '.*?' + suffix, 'g');\r\n    let regExpRes;\r\n    if (!isGeoStylerStringFunction(symbolizer.label)) {\r\n      regExpRes = symbolizer.label ? symbolizer.label.match(regExp) : null;\r\n    }\r\n    if (regExpRes) {\r\n      // if it contains a placeholder\r\n      // return olStyleFunction\r\n      const olPointStyledLabelFn = (feature: any) => {\r\n\r\n        const text = new this.OlStyleTextConstructor({\r\n          text: OlStyleUtil.resolveAttributeTemplate(feature, symbolizer.label as string, ''),\r\n          ...baseProps\r\n        });\r\n\r\n        const style = new this.OlStyleConstructor({\r\n          text: text\r\n        });\r\n\r\n        return style;\r\n      };\r\n      return olPointStyledLabelFn;\r\n    } else {\r\n      // if TextSymbolizer does not contain a placeholder\r\n      // return OlStyle\r\n      return new this.OlStyleConstructor({\r\n        text: new this.OlStyleTextConstructor({\r\n          text: symbolizer.label as string,\r\n          ...baseProps\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default OlStyleParser;\r\n"]}
{"version":3,"file":"OlFlatStyleParser.js","sourceRoot":"","sources":["../src/OlFlatStyleParser.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  CapType,\r\n  FillSymbolizer,\r\n  IconSymbolizer,\r\n  JoinType,\r\n  LineSymbolizer,\r\n  MarkSymbolizer,\r\n  ReadStyleResult,\r\n  Rule,\r\n  Style,\r\n  StyleParser,\r\n  Symbolizer,\r\n  TextSymbolizer,\r\n  UnsupportedProperties,\r\n  WriteStyleResult\r\n} from 'geostyler-style';\r\nimport { FlatStyle, FlatStyleLike, Rule as FlatRule } from 'ol/style/flat';\r\nimport OlFlatStyleUtil from './Util/OlFlatStyleUtil';\r\nimport OlStyleUtil from './Util/OlStyleUtil';\r\n\r\n/**\r\n * This parser can be used with the GeoStyler.\r\n * It implements the GeoStyler-Style Parser interface to work with OpenLayers Flat styles.\r\n *\r\n * @class OlFlatStyleParser\r\n * @implements StyleParser\r\n */\r\nexport class OlFlatStyleParser implements StyleParser<FlatStyleLike> {\r\n\r\n  /**\r\n   * The name of the OlFlatStyleParser.\r\n   */\r\n  public static title = 'OpenLayers FlatStyle Parser';\r\n\r\n  unsupportedProperties: UnsupportedProperties = {\r\n    Symbolizer: {\r\n      MarkSymbolizer: {\r\n        wellKnownName: {\r\n          support: 'partial',\r\n          info: 'Only circle is supported'\r\n        },\r\n        avoidEdges: 'none',\r\n        blur: 'none',\r\n        fillOpacity: 'none',\r\n        offset: 'none',\r\n        offsetAnchor: 'none',\r\n        pitchAlignment: 'none',\r\n        pitchScale: 'none',\r\n        radiusUnit: 'none',\r\n        rotate: 'none',\r\n        strokeWidthUnit: 'none',\r\n        visibility: 'none'\r\n      },\r\n      FillSymbolizer: {\r\n        antialias: 'none',\r\n        fillOpacity: 'none',\r\n        graphicFill: 'none',\r\n        graphicFillPadding: 'none',\r\n        outlineCap: 'none',\r\n        outlineColor: 'none',\r\n        outlineDasharray: 'none',\r\n        outlineJoin: 'none',\r\n        outlineOpacity: 'none',\r\n        outlineWidth: 'none',\r\n        outlineWidthUnit: 'none',\r\n        visibility: 'none'\r\n      },\r\n      IconSymbolizer: {\r\n        allowOverlap: 'none',\r\n        anchor: 'none',\r\n        avoidEdges: 'none',\r\n        color: 'none',\r\n        format: 'none',\r\n        haloBlur: 'none',\r\n        haloColor: 'none',\r\n        haloOpacity: 'none',\r\n        haloWidth: 'none',\r\n        haloWidthUnit: 'none',\r\n        keepUpright: 'none',\r\n        offsetAnchor: 'none',\r\n        optional: 'none',\r\n        padding: 'none',\r\n        pitchAlignment: 'none',\r\n        rotationAlignment: 'none',\r\n        size: 'none',\r\n        sizeUnit: 'none',\r\n        textFit: 'none',\r\n        textFitPadding: 'none',\r\n        visibility: 'none'\r\n      },\r\n      LineSymbolizer: {\r\n        blur: 'none',\r\n        gapWidth: 'none',\r\n        gapWidthUnit: 'none',\r\n        gradient: 'none',\r\n        graphicFill: 'none',\r\n        graphicFillPadding: 'none',\r\n        graphicStroke: 'none',\r\n        roundLimit: 'none',\r\n        spacing: 'none',\r\n        spacingUnit: 'none',\r\n        visibility: 'none',\r\n        widthUnit: 'none'\r\n      },\r\n      RasterSymbolizer: 'none',\r\n      TextSymbolizer: {\r\n        allowOverlap: 'none',\r\n        anchor: 'none',\r\n        avoidEdges: 'none',\r\n        fontStyle: 'none',\r\n        fontWeight: 'none',\r\n        haloBlur: 'none',\r\n        haloWidthUnit: 'none',\r\n        keepUpright: 'none',\r\n        letterSpacing: 'none',\r\n        letterSpacingUnit: 'none',\r\n        lineHeight: 'none',\r\n        lineHeightUnit: 'none',\r\n        maxWidth: 'none',\r\n        offsetAnchor: 'none',\r\n        optional: 'none',\r\n        pitchAlignment: 'none',\r\n        rotationAlignment: 'none',\r\n        transform: 'none',\r\n        visibility: 'none',\r\n      }\r\n    },\r\n    Function: {\r\n      numberFormat: 'none',\r\n      strAbbreviate: 'none',\r\n      strCapitalize: 'none',\r\n      strConcat: 'none',\r\n      strEndsWith: 'none',\r\n      strEqualsIgnoreCase: 'none',\r\n      strIndexOf: 'none',\r\n      strLastIndexOf: 'none',\r\n      strLength: 'none',\r\n      strMatches: 'none',\r\n      strReplace: 'none',\r\n      strStartsWith: 'none',\r\n      strStripAccents: 'none',\r\n      strSubstring: 'none',\r\n      strSubstringStart: 'none',\r\n      strToLowerCase: 'none',\r\n      strToUpperCase: 'none',\r\n      strTrim: 'none',\r\n      acos: 'none',\r\n      asin: 'none',\r\n      exp: 'none',\r\n      log: 'none',\r\n      max: 'none',\r\n      min: 'none',\r\n      pi: 'none',\r\n      random: 'none',\r\n      rint: 'none',\r\n      tan: 'none',\r\n      toDegrees: 'none',\r\n      toNumber: 'none',\r\n      toRadians: 'none',\r\n      double2bool: 'none',\r\n      parseBoolean: 'none',\r\n      step: 'none'\r\n    }\r\n  };\r\n\r\n  title = 'OpenLayers FlatStyle Parser';\r\n\r\n  flatStyleToGeoStylerFillSymbolizer(flatStyle: FlatStyle): FillSymbolizer {\r\n    // NOTE: If fillColor is an expression, we cannot detect the opacity\r\n    const [fillColor, fillOpacity] = OlFlatStyleUtil.isExpression(flatStyle['fill-color'])\r\n      ? [OlFlatStyleUtil.olExpressionToGsExpression<string>(flatStyle['fill-color'])]\r\n      : OlFlatStyleUtil.getColorAndOpacity(flatStyle['fill-color']);\r\n\r\n    // TODO add other fill properties\r\n    return {\r\n      kind: 'Fill',\r\n      color: fillColor,\r\n      opacity: fillOpacity\r\n    };\r\n  }\r\n\r\n  flatStyleToGeoStylerLineSymbolizer(flatStyle: FlatStyle): LineSymbolizer {\r\n    const [strokeColor, strokeOpacity] = OlFlatStyleUtil.isExpression(flatStyle['stroke-color'])\r\n      ? [OlFlatStyleUtil.olExpressionToGsExpression<string>(flatStyle['stroke-color'])]\r\n      : OlFlatStyleUtil.getColorAndOpacity(flatStyle['stroke-color']);\r\n\r\n    // TODO add other stroke properties\r\n    return {\r\n      kind: 'Line',\r\n      color: strokeColor,\r\n      opacity: strokeOpacity,\r\n      width: OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['stroke-width']),\r\n      cap: OlFlatStyleUtil.olExpressionToGsExpression<CapType>(flatStyle['stroke-line-cap']),\r\n      join: OlFlatStyleUtil.olExpressionToGsExpression<JoinType>(flatStyle['stroke-line-join']),\r\n      dasharray: OlFlatStyleUtil.olExpressionToGsExpression<number[]>(flatStyle['stroke-line-dash']),\r\n      dashOffset:\r\n        OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['stroke-line-dash-offset']),\r\n      miterLimit: OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['stroke-miter-limit']),\r\n      perpendicularOffset: OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['stroke-offset'])\r\n    };\r\n  }\r\n\r\n  flatStyleToGeoStylerTextSymbolizer(flatStyle: FlatStyle): TextSymbolizer {\r\n    const [textFillColor, textFillOpacity] = OlFlatStyleUtil.isExpression(flatStyle['text-fill-color'])\r\n      ? [OlFlatStyleUtil.olExpressionToGsExpression<string>(flatStyle['text-fill-color'])]\r\n      : OlFlatStyleUtil.getColorAndOpacity(flatStyle['text-fill-color']);\r\n\r\n    const [textStrokeColor, textStrokeOpacity] = OlFlatStyleUtil.isExpression(flatStyle['text-stroke-color'])\r\n      ? [OlFlatStyleUtil.olExpressionToGsExpression<string>(flatStyle['text-stroke-color'])]\r\n      : OlFlatStyleUtil.getColorAndOpacity(flatStyle['text-stroke-color']);\r\n\r\n    let font: TextSymbolizer['font'] = undefined;\r\n    let fontSize: TextSymbolizer['size'] = undefined;\r\n\r\n    if (OlFlatStyleUtil.isExpression(flatStyle['text-font'])) {\r\n      // NOTE: If font is an expression, we cannot detect the size\r\n      font = [OlFlatStyleUtil.olExpressionToGsExpression<string>(flatStyle['text-font'])];\r\n    } else if (flatStyle['text-font']) {\r\n      font = [OlStyleUtil.getFontNameFromOlFont(flatStyle['text-font'])];\r\n      fontSize = OlStyleUtil.getSizeFromOlFont(flatStyle['text-font']);\r\n    }\r\n\r\n    // TODO add missing properties\r\n    return {\r\n      kind: 'Text',\r\n      label: OlFlatStyleUtil.olExpressionToGsExpression<string>(flatStyle['text-value']),\r\n      color: textFillColor,\r\n      opacity: textFillOpacity,\r\n      haloColor: textStrokeColor,\r\n      haloOpacity: textStrokeOpacity,\r\n      haloWidth: OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['text-stroke-width']),\r\n      font,\r\n      size: fontSize,\r\n      maxAngle: OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['text-max-angle']),\r\n      offset: [\r\n        OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['text-offset-x']),\r\n        OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['text-offset-y']),\r\n      ],\r\n      // TODO check if values of ol placement are the same as values of geostyler placement\r\n      placement: OlFlatStyleUtil.olExpressionToGsExpression<'point' | 'line' | 'line-center'>(\r\n        flatStyle['text-placement']\r\n      ),\r\n      rotate: OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['text-rotation']),\r\n      justify: OlFlatStyleUtil.olExpressionToGsExpression<'left' | 'center' | 'right'>(\r\n        flatStyle['text-justify']\r\n      ),\r\n      padding: OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['text-padding']),\r\n    };\r\n  }\r\n\r\n  flatStyleToGeoStylerIconSymbolizer(flatStyle: FlatStyle): IconSymbolizer {\r\n    // TODO add missing properties\r\n    return {\r\n      kind: 'Icon',\r\n      image: flatStyle['icon-src'],\r\n      offset: OlFlatStyleUtil.olExpressionToGsExpression<[number, number]>(\r\n        flatStyle['icon-offset']\r\n      ),\r\n      opacity: OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['icon-opacity']),\r\n      rotate: OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['icon-rotation'])\r\n    };\r\n  }\r\n\r\n  flatCircleStyleToGeoStylerMarkSymbolizer(flatStyle: FlatStyle): MarkSymbolizer {\r\n    const [fillColor, fillOpacity] = OlFlatStyleUtil.isExpression(flatStyle['circle-fill-color'])\r\n      ? [OlFlatStyleUtil.olExpressionToGsExpression<string>(flatStyle['circle-fill-color'])]\r\n      : OlFlatStyleUtil.getColorAndOpacity(flatStyle['circle-fill-color']);\r\n\r\n    const [strokeColor, strokeOpacity] = OlFlatStyleUtil.isExpression(flatStyle['circle-stroke-color'])\r\n      ? [OlFlatStyleUtil.olExpressionToGsExpression<string>(flatStyle['circle-stroke-color'])]\r\n      : OlFlatStyleUtil.getColorAndOpacity(flatStyle['circle-stroke-color']);\r\n\r\n    // TODO add other circle properties\r\n    return {\r\n      kind: 'Mark',\r\n      wellKnownName: 'circle',\r\n      radius: OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['circle-radius']),\r\n      color: fillColor,\r\n      opacity: fillOpacity,\r\n      strokeColor,\r\n      strokeOpacity,\r\n      strokeWidth: OlFlatStyleUtil.olExpressionToGsExpression<number>(flatStyle['circle-stroke-width']),\r\n    };\r\n  }\r\n\r\n  flatStyleToGeoStylerSymbolizers(flatStyle: FlatStyle): Symbolizer[] {\r\n    const symbolizers: Symbolizer[] = [];\r\n\r\n    if (OlFlatStyleUtil.hasFlatFill(flatStyle)) {\r\n      symbolizers.push(this.flatStyleToGeoStylerFillSymbolizer(flatStyle));\r\n    }\r\n\r\n    if (OlFlatStyleUtil.hasFlatStroke(flatStyle)) {\r\n      symbolizers.push(this.flatStyleToGeoStylerLineSymbolizer(flatStyle));\r\n    }\r\n\r\n    if (OlFlatStyleUtil.hasFlatText(flatStyle)) {\r\n      symbolizers.push(this.flatStyleToGeoStylerTextSymbolizer(flatStyle));\r\n    }\r\n\r\n    if (OlFlatStyleUtil.hasFlatIcon(flatStyle)) {\r\n      symbolizers.push(this.flatStyleToGeoStylerIconSymbolizer(flatStyle));\r\n    }\r\n\r\n    if (OlFlatStyleUtil.hasFlatCircle(flatStyle)) {\r\n      symbolizers.push(this.flatCircleStyleToGeoStylerMarkSymbolizer(flatStyle));\r\n    }\r\n\r\n    // TODO add support for FlatShape\r\n    return symbolizers;\r\n  }\r\n\r\n  flatRuleToGeoStylerRule(flatRule: FlatRule, idx: number): Rule {\r\n    // TODO handle else rules\r\n    let symbolizers: Symbolizer[];\r\n\r\n    if (OlFlatStyleUtil.isFlatStyle(flatRule.style)) {\r\n      symbolizers = this.flatStyleToGeoStylerSymbolizers(flatRule.style);\r\n    } else {\r\n      symbolizers = flatRule.style.map(this.flatStyleToGeoStylerSymbolizers, this).flat();\r\n    }\r\n\r\n    const rule: Rule = {\r\n      name: `OL Style Rule ${idx}`,\r\n      symbolizers,\r\n    };\r\n\r\n    if (flatRule.filter) {\r\n      rule.filter = OlFlatStyleUtil.olFilterToGsFilter(flatRule.filter);\r\n    }\r\n\r\n    return rule;\r\n  }\r\n\r\n  flatRuleArrayToGeoStylerStyle(flatRuleArray: FlatRule[]): Style {\r\n    return {\r\n      name: 'OL Style',\r\n      rules: flatRuleArray.map(this.flatRuleToGeoStylerRule, this)\r\n    };\r\n  }\r\n\r\n  flatStyleArrayToGeoStylerStyle(flatStyleArray: FlatStyle[]): Style {\r\n    // We interpret FlatStyleArrays as geostyler rules without filters\r\n    return {\r\n      name: 'OL Style',\r\n      rules: flatStyleArray.map((flatStyle, idx) => {\r\n        return {\r\n          name: `OL Style Rule ${idx}`,\r\n          symbolizers: this.flatStyleToGeoStylerSymbolizers(flatStyle)\r\n        };\r\n      })\r\n    };\r\n  }\r\n\r\n  flatStyleToGeoStylerStyle(flatStyle: FlatStyle): Style {\r\n    return {\r\n      name: 'OL Style',\r\n      rules: [{\r\n        name: 'OL Style Rule 0',\r\n        symbolizers: this.flatStyleToGeoStylerSymbolizers(flatStyle)\r\n      }]\r\n    };\r\n  }\r\n\r\n  flatStyleLikeToGeoStylerStyle(flatStyleLike: FlatStyleLike): Style {\r\n    if (OlFlatStyleUtil.isFlatStyleArray(flatStyleLike)) {\r\n      return this.flatStyleArrayToGeoStylerStyle(flatStyleLike);\r\n    }\r\n    if (OlFlatStyleUtil.isFlatRuleArray(flatStyleLike)) {\r\n      return this.flatRuleArrayToGeoStylerStyle(flatStyleLike);\r\n    }\r\n    if (OlFlatStyleUtil.isFlatStyle(flatStyleLike)) {\r\n      return this.flatStyleToGeoStylerStyle(flatStyleLike);\r\n    }\r\n    throw new Error('Provided argument is not a valid FlatStyleLike.');\r\n  }\r\n\r\n  /**\r\n   * The readStyle implementation of the GeoStyler-Style StyleParser interface.\r\n   * It reads an OpenLayers FlatStyle and returns a Promise.\r\n   *\r\n   * The Promise itself resolves with a GeoStyler-Style Style.\r\n   *\r\n   * @param flatStyleLike The style to be parsed\r\n   * @return The Promise resolving with the GeoStyler-Style Style\r\n   */\r\n  readStyle(flatStyleLike: FlatStyleLike): Promise<ReadStyleResult> {\r\n    return new Promise<ReadStyleResult>((resolve) => {\r\n      try {\r\n        const geoStylerStyle = this.flatStyleLikeToGeoStylerStyle(flatStyleLike);\r\n        // TODO add support for unsupported properties\r\n        resolve({\r\n          output: geoStylerStyle\r\n        });\r\n      } catch (error) {\r\n        resolve({\r\n          errors: [error]\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The writeStyle implementation of the GeoStyler-Style StyleParser interface.\r\n   * It reads a GeoStyler-Style Style and returns a Promise containing the FlatStyle.\r\n   *\r\n   * @param geoStylerStyle A GeoStyler-Style Style.\r\n   * @return The Promise resolving with one of above mentioned style types.\r\n   */\r\n  writeStyle(geoStylerStyle: Style): Promise<WriteStyleResult<FlatStyleLike>> {\r\n    return new Promise<WriteStyleResult>((resolve) => {\r\n      try {\r\n        const flatStyle = {};\r\n        resolve({\r\n          output: flatStyle,\r\n          warnings: ['Not implemented yet']\r\n        });\r\n      } catch (error) {\r\n        resolve({\r\n          errors: [error]\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default OlFlatStyleParser;\r\n"]}
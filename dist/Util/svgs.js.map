{"version":3,"file":"svgs.js","sourceRoot":"","sources":["../../src/Util/svgs.ts"],"names":[],"mappings":"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","sourcesContent":["export interface SvgOptions {\r\n  id?: string;\r\n  dimensions: number;\r\n  fill?: string;\r\n  stroke?: string;\r\n  strokeWidth?: string;\r\n}\r\n\r\n/**\r\n * Returns an SVG string for a given shape type with the specified options.\r\n *\r\n * @param {string} [shape='circle'] The shape type. Supported values are:\r\n *     'arrow', 'arrowhead', 'asterisk_fill', 'circle', 'cross', 'cross2', 'cross_fill',\r\n *     'decagon', 'diamond', 'diagonal_half_square', 'equilateral_triangle', 'filled_arrowhead',\r\n *     'half_arc', 'half_square', 'heart', 'hexagon', 'left_half_triangle', 'line',\r\n *     'octagon', 'parallelogram_left', 'parallelogram_right', 'pentagon', 'quarter_arc',\r\n *     'quarter_circle', 'quarter_square', 'right_half_triangle', 'rounded_square',\r\n *     'semi_circle', 'shield', 'square', 'square_with_corners', 'star', 'star_diamond',\r\n *     'third_arc', 'third_circle', 'trapezoid', 'triangle'\r\n * @param {SvgOptions} [options={}] The options to use for the shape.\r\n *     The following options are supported:\r\n *     - fill: The color to use for filling the shape. Default is '#fff'.\r\n *     - stroke: The color to use for the shape's stroke. Default is '#000'.\r\n *     - strokeWidth: The width of the shape's stroke. Default is '1'.\r\n *     - dimensions: The width and height of the resulting SVG. Default is '40'.\r\n * @returns {string} An SVG string for the given shape type with the specified options.\r\n */\r\nexport const getShapeSvg = (\r\n  shape = 'circle',\r\n  { fill = '#fff', stroke = '#000', strokeWidth = '1', dimensions = 40 } = {}\r\n) => {\r\n  const svgHeader = '<svg xmlns=\"http://www.w3.org/2000/svg\" ' +\r\n    'width=\"' + dimensions + '\" ' +\r\n    'height=\"' + dimensions + '\" ' +\r\n    'viewBox = \"-12 -12 24 24\">';\r\n  const svgFooter = '</svg>';\r\n\r\n  let svgBody = '';\r\n  // Shape definitions, all are roughly scaled to 20x20 in coordinates between (-10,-10) to (10,10)\r\n  switch (shape) {\r\n    case 'arrow':\r\n      svgBody += 'd=\"M 0,-10 L 5,-5 L 2.5,-5 L 2.5,10 L -2.5,10 L -2.5,-5 L -5,-5 L 0,-10 Z\" ';\r\n      break;\r\n    case 'arrowhead':\r\n      svgBody += 'd=\"M -10 -10 L 0 0 L -10 10\" ';\r\n      break;\r\n    case 'asterisk_fill':\r\n      svgBody = 'd=\"M -1.5,-10 L 1.5,-10L 1.5,-3.939 L 6.011,-8.132 L 8.132,-6.011 L 3.939,-1.5 L 10,-1.5 L 10,1.5 ' +\r\n        'L 3.939,1.5 L 8.132,6.011 L 6.011,8.132 L 1.5,3.939 L 1.5,10 L -1.5,10 L -1.5,3.939 L -6.011,8.132 ' +\r\n        'L -8.132,6.011 L -3.939,1.5 L -10,1.5 L -10,-1.5 L -3.939,-1.5 L -8.132,-6.011 L -6.011,-8.132 ' +\r\n        'L -1.5,-3.939 L -1.5,-10 Z\" ';\r\n      break;\r\n    case 'circle':\r\n      svgBody = 'cx=\"0\" cy=\"0\" r=\"10\" ';\r\n      break;\r\n    case 'cross':\r\n      svgBody = 'd=\"M -10 0 L 10 0 M 0 -10 L 0 10\" ';\r\n      break;\r\n    case 'cross2':\r\n      svgBody = 'd=\"M -10 -10 L 10 10 M 10 -10 L -10 10\" ';\r\n      break;\r\n    case 'cross_fill':\r\n      svgBody = 'd=\"M -10,-2 L -10,-2 L -10,2 L -2,2 L -2,10 L 2,10 L 2,2 L 10,2 L 10,-2 L 2,-2 L 2,-10 L -2,-10 ' +\r\n        'L -2,-2 L -10,-2 Z\" ';\r\n      break;\r\n    case 'decagon':\r\n      svgBody ='points=\"5.878,8.09 9.511,3.09 9.511,-3.09 5.878,-8.09 0,-10 -5.878,-8.09 -9.511,-3.09 -9.511,3.09 ' +\r\n        '-5.878,8.09 0,10 5.878,8.09\" ';\r\n      break;\r\n    case 'diagonal_half_square':\r\n      svgBody = 'points=\"-10,-10 10,10 -10,10 -10,-10\" ';\r\n      break;\r\n    case 'diamond':\r\n      svgBody = 'points=\"-10,0 0,10 10,0 0,-10 -10,0\" ';\r\n      break;\r\n    case 'equilateral_triangle':\r\n      svgBody = 'points=\"-8.66,5 8.66,5 0,-10 -8.66,5\" ';\r\n      break;\r\n    case 'filled_arrowhead':\r\n      svgBody = 'd=\"M 0,0 L -10,10 L -10,-10 L 0,0 Z\" ';\r\n      break;\r\n    case 'half_arc':\r\n      svgBody = 'd=\"M -10 0 A -10 -10 0 0 1 10 0\" ';\r\n      break;\r\n    case 'half_square':\r\n      svgBody = 'points=\"-10,-10 0,-10 0,10 -10,10 -10,-10\" ';\r\n      break;\r\n    case 'heart':\r\n      svgBody = 'd=\"M -9.5 -2 A 1 1 0 0 1 0 -7.5 A 1 1 0 0 1 9.5 -2 L 0 10 Z\" ';\r\n      break;\r\n    case 'hexagon':\r\n      svgBody = 'points=\"-8.66,-5 -8.66,5 0,10 8.66,5 8.66,-5 0,-10 -8.66,-5\" ';\r\n      break;\r\n    case 'left_half_triangle':\r\n      svgBody = 'points=\"0,10 10,10 0,-10 0,10\" ';\r\n      break;\r\n    case 'line':\r\n      svgBody = 'd=\"M 0 -10 L 0 10\" ';\r\n      break;\r\n    case 'octagon':\r\n      svgBody = 'points=\"-4.142,10 4.142,10 10,4.142 10,-4.142 4.142,-10 -4.142,-10 -10,-4.142 -10,4.142 -4.142,10\" ';\r\n      break;\r\n    case 'parallelogram_left':\r\n      svgBody = 'points=\"10,5 5,-5 -10,-5 -5,5 10,5\" ';\r\n      break;\r\n    case 'parallelogram_right':\r\n      svgBody = 'points=\"5,5 10,-5 -5,-5 -10,5 5,5\" ';\r\n      break;\r\n    case 'pentagon':\r\n      svgBody = 'points=\"-9.511,-3.09 -5.878,8.09 5.878,8.09 9.511,-3.09 0,-10 -9.511,-3.09\" ';\r\n      break;\r\n    case 'quarter_arc':\r\n      svgBody = 'd=\"M 0 -10 A 10 10 0 0 0 -10 0\" ';\r\n      break;\r\n    case 'quarter_circle':\r\n      svgBody = 'd=\"M 0 -10 A 10 10 0 0 0 -10 0 L 0 0 Z\" ';\r\n      break;\r\n    case 'quarter_square':\r\n      svgBody = 'points=\"-10,-10 0,-10 0,0 -10,0 -10,-10\" ';\r\n      break;\r\n    case 'right_half_triangle':\r\n      svgBody = 'points=\"-10,10 0,10 0,-10 -10,10\" ';\r\n      break;\r\n    case 'rounded_square':\r\n      svgBody = 'x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2.5\" ry=\"2.5\" ';\r\n      break;\r\n    case 'semi_circle':\r\n      svgBody = 'd=\"M -10 0 A -10 -10 0 0 1 10 0 L 0 0 Z\" ';\r\n      break;\r\n    case 'shield':\r\n      svgBody = 'points=\"10,5 10,-10 -10,-10 -10,5 0,10 10,5\" ';\r\n      break;\r\n    case 'square':\r\n      svgBody = 'points=\"-10,-10 10,-10 10,10 -10,10\" ';\r\n      break;\r\n    case 'square_with_corners':\r\n      svgBody = 'points=\"-6.072,10 6.072,10 10,6.072 10,-6.072 6.072,-10 -6.072,-10 -10,-6.072 -10,6.072 -6.072,10\" ';\r\n      break;\r\n    case 'star':\r\n      svgBody = 'd=\"M -2.24514,-3.09017 -9.51057,-3.09017 -3.63271,1.18034 -5.87785,8.09017 0,3.81966 ' +\r\n        '5.87785,8.09017 3.63271,1.18034 9.51057,-3.09017 2.24514,-3.09017 0,-10 -2.24514,-3.09017 Z\" ';\r\n      break;\r\n    case 'star_diamond':\r\n      svgBody = 'd=\"M -2.70091,-2.70091 -10,0 -2.70091,2.70091 0,10 2.70091,2.70091 10,0 2.70091,-2.70091 0,-10 Z\" ';\r\n      break;\r\n    case 'third_arc':\r\n      svgBody = 'd=\"M 0 -10 A 10 10 0 0 0 -5 8.66\" ';\r\n      break;\r\n    case 'third_circle':\r\n      svgBody = 'd=\"M 0 -10 A 10 10 0 0 0 -5 8.66 L 0 0 Z\" ';\r\n      break;\r\n    case 'trapezoid':\r\n      svgBody = 'points=\"5,-5 10,5 -10,5 -5,-5 5,-5\" ';\r\n      break;\r\n    case 'triangle':\r\n      svgBody = 'points=\"-10,10 10,10 0,-10 -10,10\" ';\r\n      break;\r\n    default:\r\n      throw new Error('Unknown shape type: ' + shape);\r\n  }\r\n\r\n  // Depending on the shape definition use different SVG elements\r\n  if (svgBody.startsWith('points=')) {\r\n    svgBody = '<polygon id = \"' + shape + '\" ' + svgBody;\r\n  } else if (svgBody.startsWith('x=')) {\r\n    svgBody = '<rect id = \"' + shape + '\" ' + svgBody;\r\n  } else if (svgBody.startsWith('cx=')) {\r\n    svgBody = '<circle id = \"' + shape + '\" ' + svgBody;\r\n  } else {\r\n    svgBody = '<path id = \"' + shape + '\" ' + svgBody;\r\n  }\r\n\r\n  // For shapes that are just lines, make fill equal to none\r\n  switch (shape) {\r\n    case 'arrowhead':\r\n    case 'cross':\r\n    case 'cross2':\r\n    case 'half_arc':\r\n    case 'line':\r\n    case 'quarter_arc':\r\n    case 'third_arc':\r\n      svgBody += 'style=\"fill: none; stroke: ' + stroke + '; stroke-width: ' + strokeWidth + ';\" />';\r\n      break;\r\n    default:\r\n      svgBody += 'style=\"fill: ' + fill + '; stroke: ' + stroke + '; stroke-width: ' + strokeWidth + ';\" />';\r\n  }\r\n\r\n  return svgHeader + svgBody + svgFooter;\r\n};\r\n\r\n/**\r\n * Extracts the properties of an SVG string into an object.\r\n *\r\n * @param svgString the SVG string to parse\r\n * @returns an object containing the SVG properties\r\n */\r\nexport const getSvgProperties = (svgString: string): SvgOptions => {\r\n  try {\r\n    // Parse the XML string into a document\r\n    const parser = new DOMParser();\r\n    const xmlDoc = parser.parseFromString(svgString, 'application/xml');\r\n\r\n    // Check for parsing errors\r\n    const parseError = xmlDoc.querySelector('parsererror');\r\n    if (parseError) {\r\n      throw new Error('Invalid XML format');\r\n    }\r\n\r\n    // Get the first <svg> element\r\n    const svgElement = xmlDoc.querySelector('svg');\r\n    if (!svgElement) {\r\n      throw new Error('<svg> element not found');\r\n    }\r\n\r\n    // If <svg> exists, return the value of the 'width' attribute\r\n    const width = svgElement?.getAttribute('width');\r\n\r\n    // Get the first child element of <svg>\r\n    const firstChildElement = Array.from(svgElement?.children).find((child) => {\r\n      return child instanceof Element;\r\n    });\r\n\r\n    // Get the id and style from the first child element\r\n    const id = firstChildElement?.getAttribute('id') ?? '';\r\n    const styleString = firstChildElement?.getAttribute('style') ?? '';\r\n\r\n    // Split the style string into individual declarations\r\n    const styles = styleString.split(';').filter((style) => style.trim() !== '');\r\n\r\n    // Convert the declarations into a key-value map\r\n    const styleMap: Record<string, string> = {};\r\n    for (const style of styles) {\r\n      const [key, value] = style.split(':').map((str) => str.trim());\r\n      if (key && value) {\r\n        styleMap[key] = value;\r\n      }\r\n    }\r\n\r\n    const svgOpts: SvgOptions = {\r\n      id: id,\r\n      dimensions: Number(width) ? Number(width) : 0,\r\n      fill: styleMap.fill || '',\r\n      stroke: styleMap.stroke || '',\r\n      strokeWidth: styleMap['stroke-width'] || ''\r\n    };\r\n\r\n    return svgOpts;\r\n  } catch (error) {\r\n    throw new Error('Error parsing SVG');\r\n  }\r\n};\r\n"]}
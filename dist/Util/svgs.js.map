{"version":3,"file":"svgs.js","sourceRoot":"","sources":["../../src/Util/svgs.ts"],"names":[],"mappings":"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","sourcesContent":["export interface SvgOptions {\r\n  id?: string;\r\n  dimensions: number;\r\n  fill?: string;\r\n  fillOpacity?: number;\r\n  stroke?: string;\r\n  strokeWidth?: number;\r\n  strokeOpacity?: number;\r\n}\r\n\r\ntype svgDefinition = {\r\n  [key: string]: string;\r\n};\r\n\r\n// Shape definitions, all are roughly scaled to 20x20 in coordinates between (-10,-10) to (10,10)\r\nconst pointSvgs: svgDefinition = {\r\n  arrow: 'd=\"M 0,-10 L 5,-5 L 2.5,-5 L 2.5,10 L -2.5,10 L -2.5,-5 L -5,-5 L 0,-10 Z\"',\r\n  arrowhead: 'd=\"M -10 -10 L 0 0 L -10 10\"',\r\n  asterisk_fill: 'd=\"M -1.5,-10 L 1.5,-10L 1.5,-3.939 L 6.011,-8.132 L 8.132,-6.011 L 3.939,-1.5 L 10,-1.5 L 10,1.5 ' +\r\n    'L 3.939,1.5 L 8.132,6.011 L 6.011,8.132 L 1.5,3.939 L 1.5,10 L -1.5,10 L -1.5,3.939 L -6.011,8.132 ' +\r\n    'L -8.132,6.011 L -3.939,1.5 L -10,1.5 L -10,-1.5 L -3.939,-1.5 L -8.132,-6.011 L -6.011,-8.132 ' +\r\n    'L -1.5,-3.939 L -1.5,-10 Z\"',\r\n  backslash: 'd=\"M -12 -12 L 12 12\"',\r\n  carrow: 'd=\"M -10 10 L 0 -10 L 10 10 Z\"',\r\n  circle: 'cx=\"0\" cy=\"0\" r=\"10\"',\r\n  cross: 'd=\"M -12 0 L 12 0 M 0 -12 L 0 12\"',\r\n  cross_fill: 'd=\"M -10,-2 L -10,-2 L -10,2 L -2,2 L -2,10 L 2,10 L 2,2 L 10,2 L 10,-2 L 2,-2 L 2,-10 L -2,-10 ' +\r\n    'L -2,-2 L -10,-2 Z\"',\r\n  cross2: 'd=\"M -12 -12 L 12 12 M 12 -12 L -12 12\"',\r\n  decagon: 'points=\"5.878,8.09 9.511,3.09 9.511,-3.09 5.878,-8.09 0,-10 -5.878,-8.09 -9.511,-3.09 -9.511,3.09 ' +\r\n    '-5.878,8.09 0,10 5.878,8.09\"',\r\n  diagonal_half_square: 'points=\"-10,-10 10,10 -10,10 -10,-10\"',\r\n  diamond: 'points=\"-10,0 0,10 10,0 0,-10 -10,0\"',\r\n  equilateral_triangle: 'points=\"-8.66,5 8.66,5 0,-10 -8.66,5\"',\r\n  filled_arrowhead: 'd=\"M 0,0 L -10,10 L -10,-10 L 0,0 Z\"',\r\n  half_arc: 'd=\"M -10 0 A -10 -10 0 0 1 10 0\"',\r\n  half_square: 'points=\"-10,-10 0,-10 0,10 -10,10 -10,-10\"',\r\n  heart: 'd=\"M -9.5 -2 A 1 1 0 0 1 0 -7.5 A 1 1 0 0 1 9.5 -2 L 0 10 Z\"',\r\n  hexagon: 'points=\"-8.66,-5 -8.66,5 0,10 8.66,5 8.66,-5 0,-10 -8.66,-5\"',\r\n  horline: 'd=\"M -12 0 L 12 0\"',\r\n  left_half_triangle: 'points=\"0,10 10,10 0,-10 0,10\"',\r\n  line: 'd=\"M 0 -12 L 0 12\"',\r\n  oarrow: 'd=\"M -10 10 L 0 -10 L 10 10\"',\r\n  octagon: 'points=\"-4.142,10 4.142,10 10,4.142 10,-4.142 4.142,-10 -4.142,-10 -10,-4.142 -10,4.142 -4.142,10\"',\r\n  parallelogram_left: 'points=\"10,5 5,-5 -10,-5 -5,5 10,5\"',\r\n  parallelogram_right: 'points=\"5,5 10,-5 -5,-5 -10,5 5,5\"',\r\n  pentagon: 'points=\"-9.511,-3.09 -5.878,8.09 5.878,8.09 9.511,-3.09 0,-10 -9.511,-3.09\"',\r\n  quarter_arc: 'd=\"M 0 -10 A 10 10 0 0 0 -10 0\"',\r\n  quarter_circle: 'd=\"M 0 -10 A 10 10 0 0 0 -10 0 L 0 0 Z\"',\r\n  quarter_square: 'points=\"-10,-10 0,-10 0,0 -10,0 -10,-10\"',\r\n  right_half_triangle: 'points=\"-10,10 0,10 0,-10 -10,10\"',\r\n  rounded_square: 'x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2.5\" ry=\"2.5\"',\r\n  semi_circle: 'd=\"M -10 0 A -10 -10 0 0 1 10 0 L 0 0 Z\"',\r\n  shield: 'points=\"10,5 10,-10 -10,-10 -10,5 0,10 10,5\"',\r\n  slash: 'd=\"M 12 -12 L -12 12\"',\r\n  square: 'points=\"-10,-10 10,-10 10,10 -10,10\"',\r\n  square_with_corners: 'points=\"-6.072,10 6.072,10 10,6.072 10,-6.072 6.072,-10 -6.072,-10 -10,-6.072 ' +\r\n    '-10,6.072 -6.072,10\"',\r\n  star: 'd=\"M -2.24514,-3.09017 -9.51057,-3.09017 -3.63271,1.18034 -5.87785,8.09017 0,3.81966 ' +\r\n    '5.87785,8.09017 3.63271,1.18034 9.51057,-3.09017 2.24514,-3.09017 0,-10 -2.24514,-3.09017 Z\"',\r\n  star_diamond: 'd=\"M -2.70091,-2.70091 -10,0 -2.70091,2.70091 0,10 2.70091,2.70091 10,0 2.70091,-2.70091 0,-10 Z\"',\r\n  third_arc: 'd=\"M 0 -10 A 10 10 0 0 0 -5 8.66\"',\r\n  third_circle: 'd=\"M 0 -10 A 10 10 0 0 0 -5 8.66 L 0 0 Z\"',\r\n  trapezoid: 'points=\"5,-5 10,5 -10,5 -5,-5 5,-5\"',\r\n  triangle: 'points=\"-10,10 10,10 0,-10 -10,10\"'\r\n};\r\n\r\nexport const removeDuplicateShapes = (shape: string) => {\r\n  switch (shape) {\r\n    case 'shape://backslash':\r\n      return 'backslash';\r\n    case 'shape://carrow':\r\n      return 'carrow';\r\n    case 'shape://dot':\r\n      return 'circle';\r\n    case 'shape://horline':\r\n      return 'horline';\r\n    case 'shape://oarrow':\r\n      return 'oarrow';\r\n    case 'shape://plus':\r\n      return 'cross';\r\n    case 'shape://slash':\r\n      return 'slash';\r\n    case 'shape://times':\r\n    case 'x':\r\n      return 'cross2';\r\n    case 'shape://vertline':\r\n      return 'line';\r\n    default:\r\n      return shape;\r\n  }\r\n};\r\n\r\nexport const isPointSvgDefined = (shape: string) => shape in pointSvgs;\r\n\r\n/**\r\n * Returns an SVG string for a given shape type with the specified options.\r\n *\r\n * @param {string} [shape='circle'] The shape type. Supported values are:\r\n *     'arrow', 'arrowhead', 'asterisk_fill', 'circle', 'cross', 'cross2', 'cross_fill',\r\n *     'decagon', 'diamond', 'diagonal_half_square', 'equilateral_triangle', 'filled_arrowhead',\r\n *     'half_arc', 'half_square', 'heart', 'hexagon', 'left_half_triangle', 'line',\r\n *     'octagon', 'parallelogram_left', 'parallelogram_right', 'pentagon', 'quarter_arc',\r\n *     'quarter_circle', 'quarter_square', 'right_half_triangle', 'rounded_square',\r\n *     'semi_circle', 'shield', 'square', 'square_with_corners', 'star', 'star_diamond',\r\n *     'third_arc', 'third_circle', 'trapezoid', 'triangle'\r\n * @param {SvgOptions} [options={}] The options to use for the shape.\r\n *     The following options are supported:\r\n *     - fill: The color to use for filling the shape. Default is '#fff'.\r\n *     - stroke: The color to use for the shape's stroke. Default is '#000'.\r\n *     - strokeWidth: The width of the shape's stroke. Default is '1'.\r\n *     - dimensions: The width and height of the resulting SVG. Default is '40'.\r\n * @returns {string} An SVG string for the given shape type with the specified options.\r\n */\r\nexport const getShapeSvg = (\r\n  shape = 'circle',\r\n  options: SvgOptions = { dimensions: 40 }\r\n) => {\r\n  const { dimensions, fill, fillOpacity, stroke, strokeWidth, strokeOpacity } = options;\r\n\r\n  if (!isPointSvgDefined(shape)) {\r\n    throw new Error('Unknown shape: ' + shape);\r\n  }\r\n\r\n  const svgHeader = '<svg xmlns=\"http://www.w3.org/2000/svg\" ' +\r\n    'width=\"' + dimensions + '\" ' +\r\n    'height=\"' + dimensions + '\" ' +\r\n    'viewBox=\"-12 -12 24 24\">';\r\n  const svgFooter = '</svg>';\r\n\r\n  let svgBody = pointSvgs[shape] + ' ';\r\n\r\n  // Depending on the shape definition use different SVG elements\r\n  if (svgBody.startsWith('points=')) {\r\n    svgBody = '<polygon id=\"' + shape + '\" ' + svgBody;\r\n  } else if (svgBody.startsWith('x=')) {\r\n    svgBody = '<rect id=\"' + shape + '\" ' + svgBody;\r\n  } else if (svgBody.startsWith('cx=')) {\r\n    svgBody = '<circle id=\"' + shape + '\" ' + svgBody;\r\n  } else {\r\n    svgBody = '<path id=\"' + shape + '\" ' + svgBody;\r\n  }\r\n\r\n  let svgStyle = '';\r\n  if (fill) {\r\n    svgStyle += 'fill:' + fill + '; ';\r\n  }\r\n  if (fillOpacity) {\r\n    svgStyle += 'fill-opacity:' + fillOpacity + '; ';\r\n  }\r\n  if (stroke) {\r\n    svgStyle += 'stroke:' + stroke + '; ';\r\n  }\r\n  if (strokeWidth !== undefined && strokeWidth !== 0) {\r\n    svgStyle += 'stroke-width:' + strokeWidth + '; ';\r\n  }\r\n  if (strokeOpacity) {\r\n    svgStyle += 'stroke-opacity:' + strokeOpacity + '; ';\r\n  }\r\n\r\n  svgStyle = svgStyle.trim();\r\n  // if (svgStyle.endsWith(';')) {\r\n  //   svgStyle = svgStyle.slice(0, -1); // Remove the semicolon\r\n  // }\r\n\r\n  svgBody += 'style=\"' + svgStyle + '\" />';\r\n\r\n  return svgHeader + svgBody + svgFooter;\r\n};\r\n\r\n/**\r\n * Extracts the properties of an SVG string into an object.\r\n *\r\n * @param svgString the SVG string to parse\r\n * @returns an object containing the SVG properties\r\n */\r\nexport const getSvgProperties = (svgString: string): SvgOptions => {\r\n  try {\r\n    // Parse the XML string into a document\r\n    const parser = new DOMParser();\r\n    const xmlDoc = parser.parseFromString(svgString, 'application/xml');\r\n\r\n    // Check for parsing errors\r\n    const parseError = xmlDoc.querySelector('parsererror');\r\n    if (parseError) {\r\n      throw new Error('Invalid XML format');\r\n    }\r\n\r\n    // Get the first <svg> element\r\n    const svgElement = xmlDoc.querySelector('svg');\r\n    if (!svgElement) {\r\n      throw new Error('<svg> element not found');\r\n    }\r\n\r\n    // If <svg> exists, return the value of the 'width' attribute\r\n    const width = svgElement?.getAttribute('width');\r\n    if (!width) {\r\n      throw new Error('<svg> element must include dimensions (no width attribute exists)');\r\n    }\r\n\r\n    // Get the first child element of <svg>\r\n    const firstChildElement = Array.from(svgElement?.children).find((child) => {\r\n      return child instanceof Element;\r\n    });\r\n\r\n    // Get the id and style from the first child element\r\n    const id = firstChildElement?.getAttribute('id') ?? '';\r\n    const styleString = firstChildElement?.getAttribute('style') ?? '';\r\n\r\n    // Split the style string into individual declarations\r\n    const styles = styleString.split(';').filter((style) => style.trim() !== '');\r\n\r\n    // Convert the declarations into a key-value map\r\n    const styleMap: Record<string, string> = {};\r\n    for (const style of styles) {\r\n      const [key, value] = style.split(':').map((str) => str.trim());\r\n      if (key && value) {\r\n        styleMap[key] = value;\r\n      }\r\n    }\r\n\r\n    const svgOpts: SvgOptions = {\r\n      id,\r\n      dimensions: Number(width),\r\n      ...(styleMap.fill && { fill: styleMap.fill }),\r\n      ...(styleMap['fill-opacity'] && { fillOpacity: Number(styleMap['fill-opacity']) }),\r\n      ...(styleMap.stroke && { stroke: styleMap.stroke }),\r\n      ...(styleMap['stroke-width'] && { strokeWidth: Number(styleMap['stroke-width']) }),\r\n      ...(styleMap['stroke-opacity'] && { strokeOpacity: Number(styleMap['stroke-opacity']) })\r\n    };\r\n\r\n    return svgOpts;\r\n  } catch (error) {\r\n    throw new Error('Error parsing SVG');\r\n  }\r\n};\r\n"]}
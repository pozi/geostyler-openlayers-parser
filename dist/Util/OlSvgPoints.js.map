{"version":3,"file":"OlSvgPoints.js","sourceRoot":"","sources":["../../src/Util/OlSvgPoints.ts"],"names":[],"mappings":"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","sourcesContent":["import { MarkSymbolizer } from 'geostyler-style';\r\nimport OlStyleUtil from './OlStyleUtil';\r\nimport { LINE_WELLKNOWNNAMES, NOFILL_WELLKNOWNNAMES, svgDefinition } from './OlSvgUtil';\r\n\r\n// Shape definitions, all are roughly scaled to 20x20 in coordinates between (-10,-10) to (10,10)\r\nexport const pointSvgs: svgDefinition = {\r\n  arrow: 'd=\"M 0,-10 L 5,-5 L 2.5,-5 L 2.5,10 L -2.5,10 L -2.5,-5 L -5,-5 L 0,-10 Z\"',\r\n  arrowhead: 'd=\"M -10 -10 L 0 0 L -10 10\"',\r\n  asterisk_fill: 'd=\"M -1.5,-10 L 1.5,-10L 1.5,-3.939 L 6.011,-8.132 L 8.132,-6.011 L 3.939,-1.5 L 10,-1.5 L 10,1.5 ' +\r\n    'L 3.939,1.5 L 8.132,6.011 L 6.011,8.132 L 1.5,3.939 L 1.5,10 L -1.5,10 L -1.5,3.939 L -6.011,8.132 ' +\r\n    'L -8.132,6.011 L -3.939,1.5 L -10,1.5 L -10,-1.5 L -3.939,-1.5 L -8.132,-6.011 L -6.011,-8.132 ' +\r\n    'L -1.5,-3.939 L -1.5,-10 Z\"',\r\n  backslash: 'd=\"M -12 -12 L 12 12\"',\r\n  carrow: 'd=\"M -10 10 L 0 -10 L 10 10 Z\"',\r\n  circle: 'cx=\"0\" cy=\"0\" r=\"10\"',\r\n  cross: 'd=\"M -12 0 L 12 0 M 0 -12 L 0 12\"',\r\n  cross_fill: 'd=\"M -10,-2 L -10,-2 L -10,2 L -2,2 L -2,10 L 2,10 L 2,2 L 10,2 L 10,-2 L 2,-2 L 2,-10 L -2,-10 ' +\r\n    'L -2,-2 L -10,-2 Z\"',\r\n  cross2: 'd=\"M -12 -12 L 12 12 M 12 -12 L -12 12\"',\r\n  decagon: 'points=\"5.878,8.09 9.511,3.09 9.511,-3.09 5.878,-8.09 0,-10 -5.878,-8.09 -9.511,-3.09 -9.511,3.09 ' +\r\n    '-5.878,8.09 0,10 5.878,8.09\"',\r\n  diagonal_half_square: 'points=\"-10,-10 10,10 -10,10 -10,-10\"',\r\n  diamond: 'points=\"-10,0 0,10 10,0 0,-10 -10,0\"',\r\n  equilateral_triangle: 'points=\"-8.66,5 8.66,5 0,-10 -8.66,5\"',\r\n  filled_arrowhead: 'd=\"M 0,0 L -10,10 L -10,-10 L 0,0 Z\"',\r\n  half_arc: 'd=\"M -10 0 A 10 10 0 0 1 10 0\"',\r\n  half_square: 'points=\"-10,-10 0,-10 0,10 -10,10 -10,-10\"',\r\n  heart: 'd=\"M -9.5 -2 A 1 1 0 0 1 0 -7.5 A 1 1 0 0 1 9.5 -2 L 0 10 Z\"',\r\n  hexagon: 'points=\"-8.66,-5 -8.66,5 0,10 8.66,5 8.66,-5 0,-10 -8.66,-5\"',\r\n  horline: 'd=\"M -12 0 L 12 0\"',\r\n  left_half_triangle: 'points=\"0,10 10,10 0,-10 0,10\"',\r\n  line: 'd=\"M 0 -12 L 0 12\"',\r\n  oarrow: 'd=\"M -10 10 L 0 -10 L 10 10\"',\r\n  octagon: 'points=\"-4.142,10 4.142,10 10,4.142 10,-4.142 4.142,-10 -4.142,-10 -10,-4.142 -10,4.142 -4.142,10\"',\r\n  parallelogram_left: 'points=\"10,5 5,-5 -10,-5 -5,5 10,5\"',\r\n  parallelogram_right: 'points=\"5,5 10,-5 -5,-5 -10,5 5,5\"',\r\n  pentagon: 'points=\"-9.511,-3.09 -5.878,8.09 5.878,8.09 9.511,-3.09 0,-10 -9.511,-3.09\"',\r\n  quarter_arc: 'd=\"M 0 -10 A 10 10 0 0 0 -10 0\"',\r\n  quarter_circle: 'd=\"M 0 -10 A 10 10 0 0 0 -10 0 L 0 0 Z\"',\r\n  quarter_square: 'points=\"-10,-10 0,-10 0,0 -10,0 -10,-10\"',\r\n  right_half_triangle: 'points=\"-10,10 0,10 0,-10 -10,10\"',\r\n  rounded_square: 'x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2.5\" ry=\"2.5\"',\r\n  semi_circle: 'd=\"M -10 0 A 10 10 0 0 1 10 0 L 0 0 Z\"',\r\n  shield: 'points=\"10,5 10,-10 -10,-10 -10,5 0,10 10,5\"',\r\n  slash: 'd=\"M 12 -12 L -12 12\"',\r\n  square: 'points=\"-10,-10 10,-10 10,10 -10,10\"',\r\n  square_with_corners: 'points=\"-6.072,10 6.072,10 10,6.072 10,-6.072 6.072,-10 -6.072,-10 -10,-6.072 ' +\r\n    '-10,6.072 -6.072,10\"',\r\n  star: 'd=\"M -2.24514,-3.09017 -9.51057,-3.09017 -3.63271,1.18034 -5.87785,8.09017 0,3.81966 ' +\r\n    '5.87785,8.09017 3.63271,1.18034 9.51057,-3.09017 2.24514,-3.09017 0,-10 -2.24514,-3.09017 Z\"',\r\n  star_diamond: 'd=\"M -2.70091,-2.70091 -10,0 -2.70091,2.70091 0,10 2.70091,2.70091 10,0 2.70091,-2.70091 0,-10 Z\"',\r\n  third_arc: 'd=\"M 0 -10 A 10 10 0 0 0 -5 8.66\"',\r\n  third_circle: 'd=\"M 0 -10 A 10 10 0 0 0 -5 8.66 L 0 0 Z\"',\r\n  trapezoid: 'points=\"5,-5 10,5 -10,5 -5,-5 5,-5\"',\r\n  triangle: 'points=\"-10,10 10,10 0,-10 -10,10\"'\r\n};\r\n\r\nexport const cleanWellKnownName = (wellKnownName: string) => {\r\n  let cleanedWellKnownName = wellKnownName.replace('shape://', '');\r\n  cleanedWellKnownName = cleanedWellKnownName.replace('brush://', '');\r\n  switch (cleanedWellKnownName) {\r\n    case 'dot':\r\n      return 'circle';\r\n    case 'plus':\r\n      return 'cross';\r\n    case 'times':\r\n    case 'x':\r\n      return 'cross2';\r\n    case 'vertline':\r\n      return 'line';\r\n    default:\r\n      return cleanedWellKnownName;\r\n  }\r\n};\r\n\r\nexport const isPointDefinedAsSvg = (wellKnownName: string) => cleanWellKnownName(wellKnownName) in pointSvgs;\r\n\r\n/**\r\n * Get the SVG string for a point symbolizer.\r\n *\r\n * @param symbolizer A GeoStyler-Style MarkSymbolizer.\r\n * @return The SVG string\r\n */\r\nexport const getPointSvg = (\r\n  symbolizer: MarkSymbolizer\r\n) => {\r\n  const { wellKnownName, radius, color, fillOpacity, strokeColor, strokeWidth, strokeOpacity } = symbolizer;\r\n  const dimensions = (radius as number ?? 6) * 2;  // Default to 12 pixels\r\n\r\n  if (!isPointDefinedAsSvg(wellKnownName)) {\r\n    throw new Error('Unknown wellKnownName: ' + wellKnownName);\r\n  }\r\n\r\n  const cleanedWellKnownName = cleanWellKnownName(wellKnownName);\r\n\r\n  const svgHeader = '<svg xmlns=\"http://www.w3.org/2000/svg\" ' +\r\n    'width=\"' + dimensions + '\" ' +\r\n    'height=\"' + dimensions + '\" ' +\r\n    'viewBox=\"-12 -12 24 24\">';\r\n  const svgFooter = '</svg>';\r\n\r\n  let svgBody = pointSvgs[cleanedWellKnownName] + ' ';\r\n\r\n  // Depending on the wellKnownName definition use different SVG elements\r\n  if (svgBody.startsWith('points=')) {\r\n    svgBody = '<polygon id=\"' + cleanedWellKnownName + '\" ' + svgBody;\r\n  } else if (svgBody.startsWith('x=')) {\r\n    svgBody = '<rect id=\"' + cleanedWellKnownName + '\" ' + svgBody;\r\n  } else if (svgBody.startsWith('cx=')) {\r\n    svgBody = '<circle id=\"' + cleanedWellKnownName + '\" ' + svgBody;\r\n  } else {\r\n    svgBody = '<path id=\"' + cleanedWellKnownName + '\" ' + svgBody;\r\n  }\r\n\r\n  let svgStyle = '';\r\n  if (color && !NOFILL_WELLKNOWNNAMES.includes(cleanedWellKnownName)) {\r\n    svgStyle += 'fill:' + color + '; ';\r\n  } else if (NOFILL_WELLKNOWNNAMES.includes(cleanedWellKnownName)) {\r\n    svgStyle += 'fill:none; ';\r\n  };\r\n  if (OlStyleUtil.checkOpacity(fillOpacity) && !NOFILL_WELLKNOWNNAMES.includes(cleanedWellKnownName)) {\r\n    svgStyle += 'fill-opacity:' + fillOpacity + '; ';\r\n  };\r\n  if (strokeColor) {\r\n    svgStyle += 'stroke:' + strokeColor + '; ';\r\n  };\r\n  if (strokeWidth) {\r\n    const scaleFactor = dimensions / 24;\r\n    svgStyle += 'stroke-width:' + Number(strokeWidth) / scaleFactor + '; ';\r\n  };\r\n  if (OlStyleUtil.checkOpacity(strokeOpacity)) {\r\n    svgStyle += 'stroke-opacity:' + strokeOpacity + '; ';\r\n  };\r\n  if (LINE_WELLKNOWNNAMES.includes(cleanedWellKnownName)) {\r\n    svgStyle = svgStyle + 'stroke-linejoin: butt';\r\n  };\r\n\r\n  svgBody += 'style=\"' + svgStyle.trim() + '\" />';\r\n\r\n  return svgHeader + svgBody + svgFooter;\r\n};\r\n"]}
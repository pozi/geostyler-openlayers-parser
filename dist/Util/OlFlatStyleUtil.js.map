{"version":3,"file":"OlFlatStyleUtil.js","sourceRoot":"","sources":["../../src/Util/OlFlatStyleUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { invert } from 'lodash';\r\nimport {\r\n  FlatStyle,\r\n  FlatStyleLike,\r\n  Rule as FlatRule,\r\n  ColorExpression,\r\n} from 'ol/style/flat';\r\n\r\nimport {\r\n  Fatan,\r\n  Fatan2,\r\n  Filter,\r\n  Fin,\r\n  Finterpolate,\r\n  FstrDefaultIfBlank,\r\n  GeoStylerFunction,\r\n  Operator,\r\n  PropertyType,\r\n  Expression as StyleExpression\r\n} from 'geostyler-style';\r\n\r\nimport OlStyleUtil from './OlStyleUtil';\r\n\r\nexport type Expression = any[];\r\n\r\nconst comparisonFilterNames = [\r\n  '==',\r\n  '!=',\r\n  '<',\r\n  '<=',\r\n  '>',\r\n  '>=',\r\n  'between',\r\n];\r\n\r\nconst filterNames = [\r\n  ...comparisonFilterNames,\r\n  'all',\r\n  'any',\r\n  '!'\r\n];\r\n\r\nexport type FilterExpression = [typeof filterNames[number], ...any[]];\r\nexport type ComparisonFilterExpression = [typeof comparisonFilterNames[number], ...any[]];\r\n\r\n// TODO continue here\r\nconst filterNameMap: Record<Operator, typeof filterNames[number] | null> = {\r\n  '==': '==',\r\n  '*=': null,\r\n  '!=': '!=',\r\n  '<': '<',\r\n  '<=': '<=',\r\n  '>': '>',\r\n  '>=': '>=',\r\n  '<=x<=': 'between',\r\n  '&&': 'all',\r\n  '||': 'any',\r\n  '!': '!',\r\n};\r\n\r\nconst invertedFilterMap: Partial<Record<typeof filterNames[number], Operator>> =\r\n  invert(filterNameMap) as Partial<Record<typeof filterNames[number], Operator>> ;\r\n\r\nconst expressionNames = [\r\n  'get',\r\n  '*',\r\n  '/',\r\n  '+',\r\n  '-',\r\n  '%',\r\n  '^',\r\n  'abs',\r\n  'floor',\r\n  'round',\r\n  'ceil',\r\n  'sin',\r\n  'cos',\r\n  'atan',\r\n  'sqrt',\r\n  'case',\r\n  'interpolate',\r\n  'string',\r\n  '<',\r\n  '<=',\r\n  '>',\r\n  '>=',\r\n  '==',\r\n  '!=',\r\n  '!',\r\n  'all',\r\n  'any',\r\n  'between',\r\n  'in',\r\n  'to-string',\r\n] as const;\r\n\r\nconst functionNameMap: Record<GeoStylerFunction['name'], typeof expressionNames[number]| null> = {\r\n  // ---- string ----\r\n  numberFormat: null,\r\n  // numberFormat: 'number-format', // TODO: this could be done in theory but gs and mb use different format approaches\r\n  strAbbreviate: null,\r\n  strCapitalize: null,\r\n  strConcat: null,\r\n  strDefaultIfBlank: 'string',\r\n  strEndsWith: null,\r\n  strEqualsIgnoreCase: null,\r\n  strIndexOf: null,\r\n  strLastIndexOf: null,\r\n  strLength: null,\r\n  strMatches: null,\r\n  strReplace: null,\r\n  strStartsWith: null,\r\n  strStripAccents: null,\r\n  strSubstring: null,\r\n  strSubstringStart: null,\r\n  strToLowerCase: null,\r\n  strToUpperCase: null,\r\n  strToString: 'to-string',\r\n  strTrim: null,\r\n  // ---- number ----\r\n  add: '+',\r\n  abs: 'abs',\r\n  acos: null,\r\n  asin: null,\r\n  // openlayers uses atan if only one argument is passed\r\n  // atan2 is used for two arguments\r\n  atan: 'atan',\r\n  atan2: 'atan',\r\n  ceil: 'ceil',\r\n  cos: 'cos',\r\n  div: '/',\r\n  exp: null,\r\n  floor: 'floor',\r\n  interpolate: 'interpolate',\r\n  log: null,\r\n  // – : 'ln2'\r\n  // – : 'log10'\r\n  // – : 'log2'\r\n  max: null,\r\n  min: null,\r\n  modulo: '%',\r\n  mul: '*',\r\n  pi: null,\r\n  // - : 'e',\r\n  pow: '^',\r\n  random: null,\r\n  rint: null,\r\n  round: 'round',\r\n  sin: 'sin',\r\n  sqrt: 'sqrt',\r\n  sub: '-',\r\n  tan: null,\r\n  toDegrees: null,\r\n  toNumber: null,\r\n  toRadians: null,\r\n  // ---- boolean ----\r\n  all: 'all',\r\n  // eslint-disable-next-line id-blacklist\r\n  any: 'any',\r\n  between: 'between',\r\n  double2bool: null,\r\n  equalTo: '==',\r\n  greaterThan: '>',\r\n  greaterThanOrEqualTo: '>=',\r\n  in: 'in',\r\n  lessThan: '<',\r\n  lessThanOrEqualTo: '<=',\r\n  not: '!',\r\n  notEqualTo: '!=',\r\n  parseBoolean: null,\r\n  // ---- unknown ----\r\n  case: 'case',\r\n  property: 'get',\r\n  step: null\r\n};\r\n\r\nconst invertedFunctionNameMap: Partial<Record<typeof expressionNames[number], GeoStylerFunction['name']>> =\r\n  invert(functionNameMap);\r\n\r\nclass OlFlatStyleUtil {\r\n  public static isFlatRule(flatStyle: FlatStyle | FlatRule): flatStyle is FlatRule {\r\n    const hasStyleProp = flatStyle.hasOwnProperty('style');\r\n    return hasStyleProp;\r\n  }\r\n\r\n  public static isFlatRuleArray(flatStyleLike: FlatStyleLike): flatStyleLike is FlatRule[] {\r\n    const isArray = Array.isArray(flatStyleLike);\r\n    if (!isArray) {\r\n      return false;\r\n    }\r\n\r\n    const hasFlatRules = flatStyleLike.every(style => OlFlatStyleUtil.isFlatRule(style));\r\n    return hasFlatRules;\r\n  }\r\n\r\n  public static isFlatStyle(flatStyleLike: FlatStyleLike): flatStyleLike is FlatStyle {\r\n    const isArray = Array.isArray(flatStyleLike);\r\n    if (isArray) {\r\n      return false;\r\n    }\r\n    const hasStyleProp = flatStyleLike.hasOwnProperty('style');\r\n    return !hasStyleProp;\r\n  }\r\n\r\n  public static isFlatStyleArray(flatStyleLike: FlatStyleLike): flatStyleLike is FlatStyle[] {\r\n    const isArray = Array.isArray(flatStyleLike);\r\n    if (!isArray) {\r\n      return false;\r\n    }\r\n    const isFlatRuleArray = OlFlatStyleUtil.isFlatRuleArray(flatStyleLike);\r\n    if (isFlatRuleArray) {\r\n      return false;\r\n    }\r\n    const hasFlatStyles = flatStyleLike.every(\r\n      style => OlFlatStyleUtil.isFlatStyle(style)\r\n    );\r\n    return hasFlatStyles;\r\n  }\r\n\r\n  public static isExpression(flatStyleProp: any): flatStyleProp is Expression {\r\n    const isUndefined = flatStyleProp === undefined;\r\n    const isArray = Array.isArray(flatStyleProp);\r\n    if (isUndefined || !isArray) {\r\n      return false;\r\n    }\r\n\r\n    const hasOperator = typeof flatStyleProp[0] == 'string';\r\n    const isExpressionName = expressionNames.includes(flatStyleProp[0]);\r\n    return hasOperator && isExpressionName;\r\n  }\r\n\r\n  public static isFilter(flatStyleProp: any): flatStyleProp is FilterExpression {\r\n    const isUndefined = flatStyleProp === undefined;\r\n    const isArray = Array.isArray(flatStyleProp);\r\n    if (isUndefined || !isArray) {\r\n      return false;\r\n    }\r\n\r\n    const hasOperator = typeof flatStyleProp[0] == 'string';\r\n    const isFilterName = filterNames.includes(flatStyleProp[0]);\r\n    return hasOperator && isFilterName;\r\n  }\r\n\r\n  public static isComparisonFilter(filter: FilterExpression): filter is  ComparisonFilterExpression {\r\n    const isUndefined = filter === undefined;\r\n    const isArray = Array.isArray(filter);\r\n    if (isUndefined || !isArray) {\r\n      return false;\r\n    }\r\n\r\n    const hasOperator = typeof filter[0] == 'string';\r\n    const isComparisonFilterName = comparisonFilterNames.includes(filter[0]);\r\n    return hasOperator && isComparisonFilterName;\r\n  }\r\n\r\n  public static getColorAndOpacity(\r\n    flatStyleProp: ColorExpression | undefined\r\n  ): [string | StyleExpression<string> | undefined, number | undefined] {\r\n    if (flatStyleProp === undefined) {\r\n      return [undefined, undefined];\r\n    }\r\n\r\n    const isArray = Array.isArray(flatStyleProp);\r\n    if (!isArray) {\r\n      let hexColor = OlStyleUtil.getHexColor(flatStyleProp);\r\n      if (!hexColor) {\r\n        throw new Error('Invalid color value');\r\n      }\r\n      const hasAlpha = hexColor.length > 7;\r\n      if (hasAlpha) {\r\n        hexColor = hexColor.slice(0, 7);\r\n      }\r\n      const opacity = OlStyleUtil.getOpacity(flatStyleProp);\r\n      return [hexColor, opacity];\r\n    }\r\n    return [\r\n      OlStyleUtil.getHexCodeFromRgbArray(flatStyleProp),\r\n      flatStyleProp[3]\r\n    ];\r\n  }\r\n\r\n  public static hasFlatFill(flatStyle: FlatStyle) {\r\n    const hasFill = flatStyle.hasOwnProperty('fill-color') && flatStyle['fill-color'] !== undefined;\r\n    return hasFill;\r\n  }\r\n\r\n  public static hasFlatStroke(flatStyle: FlatStyle) {\r\n    const hasStrokeColor = flatStyle.hasOwnProperty('stroke-color') && flatStyle['stroke-color'] !== undefined;\r\n    const hasStrokeWidth = flatStyle.hasOwnProperty('stroke-width') && flatStyle['stroke-width'] !== undefined;\r\n    return hasStrokeColor || hasStrokeWidth;\r\n  }\r\n\r\n  public static hasFlatText(flatStyle: FlatStyle) {\r\n    const hasTextValue = flatStyle.hasOwnProperty('text-value') && flatStyle['text-value'] !== undefined;\r\n    return hasTextValue;\r\n  }\r\n\r\n  public static hasFlatIcon(flatStyle: FlatStyle) {\r\n    const hasIconSrc = flatStyle.hasOwnProperty('icon-src') && flatStyle['icon-src'] !== undefined;\r\n    return hasIconSrc;\r\n  }\r\n\r\n  public static hasFlatCircle(flatStyle: FlatStyle) {\r\n    const hasCircleRadius = flatStyle.hasOwnProperty('circle-radius') && flatStyle['circle-radius'] !== undefined;\r\n    return hasCircleRadius;\r\n  }\r\n\r\n  public static olExpressionToGsExpression<T extends PropertyType>(olExpression: any): StyleExpression<T> {\r\n    if (!OlFlatStyleUtil.isExpression(olExpression)) {\r\n      return olExpression;\r\n    }\r\n\r\n    const olExpressionName = olExpression[0] as typeof expressionNames[number];\r\n    const functionName = invertedFunctionNameMap[olExpressionName];\r\n\r\n    let func: GeoStylerFunction;\r\n    const args = olExpression.slice(1);\r\n    switch (functionName) {\r\n      case 'case': {\r\n        const gsArgs: any[] = [];\r\n        const fallback = OlFlatStyleUtil.olExpressionToGsExpression(args.pop());\r\n        args.forEach((a, index) => {\r\n          var gsIndex = Math.floor(index / 2);\r\n          if (index % 2 === 0) {\r\n            gsArgs[gsIndex] = {\r\n              case: OlFlatStyleUtil.olExpressionToGsExpression(a)\r\n            };\r\n          } else {\r\n            gsArgs[gsIndex] = {\r\n              ...gsArgs[gsIndex] as any,\r\n              value: OlFlatStyleUtil.olExpressionToGsExpression(a)\r\n            };\r\n          }\r\n        });\r\n        func = {\r\n          name: functionName,\r\n          args: [fallback, ...gsArgs]\r\n        };\r\n        break;\r\n      }\r\n      case 'interpolate': {\r\n        // currently only supporting linear interpolation\r\n        const interpolationType = (args.shift() as [string])[0];\r\n        const input = OlFlatStyleUtil.olExpressionToGsExpression(args.shift());\r\n        const gsArgs: any[] = [];\r\n\r\n        args.forEach((a, index) => {\r\n          const gsIndex = Math.floor(index / 2);\r\n          if (index % 2 === 0) {\r\n            gsArgs[gsIndex] = {\r\n              stop: OlFlatStyleUtil.olExpressionToGsExpression(a)\r\n            };\r\n          } else {\r\n            gsArgs[gsIndex] = {\r\n              ...gsArgs[gsIndex] as any,\r\n              value: OlFlatStyleUtil.olExpressionToGsExpression(a)\r\n            };\r\n          }\r\n        });\r\n        // adding the interpolation type and the input as the first args\r\n        gsArgs.unshift({name: interpolationType}, input);\r\n        func = {\r\n          name: functionName,\r\n          args: gsArgs as Finterpolate['args']\r\n        };\r\n        break;\r\n      }\r\n      case 'strDefaultIfBlank': {\r\n        func = {\r\n          name: functionName,\r\n          // gs function only allows two args\r\n          args: args\r\n            .slice(0, 2)\r\n            .map(OlFlatStyleUtil.olExpressionToGsExpression) as FstrDefaultIfBlank['args']\r\n        };\r\n        break;\r\n      }\r\n      case 'in': {\r\n        const needle = OlFlatStyleUtil.olExpressionToGsExpression(args.shift());\r\n        let haystack: number[] | string[] = [];\r\n        if (args[0] === 'literal') {\r\n          haystack = args[0].pop();\r\n        } else {\r\n          haystack = args[0];\r\n        }\r\n        func = {\r\n          name: functionName,\r\n          args: [needle, ...haystack]\r\n        } as Fin;\r\n        break;\r\n      }\r\n      case 'atan':\r\n      case 'atan2': {\r\n        const atanFunc = {\r\n          name: args.length === 1 ? 'atan' : 'atan2',\r\n          args: args.map(OlFlatStyleUtil.olExpressionToGsExpression)\r\n        };\r\n        if (args.length === 1) {\r\n          func = atanFunc as Fatan;\r\n        } else {\r\n          func = atanFunc as Fatan2;\r\n        }\r\n        break;\r\n      }\r\n      default:\r\n        func = {\r\n          name: functionName,\r\n          args: args.map(OlFlatStyleUtil.olExpressionToGsExpression)\r\n        } as GeoStylerFunction;\r\n        break;\r\n    }\r\n    return func as StyleExpression<T>;\r\n  }\r\n\r\n  public static olFilterToGsFilter(olFilter: any): Filter | undefined {\r\n    const isExpression = OlFlatStyleUtil.isExpression(olFilter);\r\n    const isFilter = OlFlatStyleUtil.isFilter(olFilter);\r\n    const isComparisonFilter = OlFlatStyleUtil.isComparisonFilter(olFilter);\r\n    if (!isFilter && !isExpression) {\r\n      return olFilter;\r\n    }\r\n\r\n    let filter: Filter;\r\n    if (isFilter) {\r\n      const olExpressionName = olFilter[0] as typeof filterNames[number];\r\n      const filterName = invertedFilterMap[olExpressionName];\r\n      const args = olFilter.slice(1);\r\n\r\n      let propertyName: string | StyleExpression<string> = args.shift();\r\n      // In GeoStyler, the first argument of a comparison filter\r\n      // is the property name as plain string. So if the first argument\r\n      // is a 'get' expression, we extract the property name from it.\r\n      if (isComparisonFilter && Array.isArray(propertyName) && propertyName[0] === 'get') {\r\n        propertyName = propertyName[1];\r\n      }\r\n\r\n      filter = [\r\n        filterName,\r\n        OlFlatStyleUtil.olFilterToGsFilter(propertyName),\r\n        ...args.map(OlFlatStyleUtil.olFilterToGsFilter)\r\n      ] as Filter;\r\n    } else {\r\n      filter = OlFlatStyleUtil.olExpressionToGsExpression(olFilter);\r\n    }\r\n\r\n    return filter;\r\n  }\r\n}\r\n\r\nexport default OlFlatStyleUtil;\r\n"]}
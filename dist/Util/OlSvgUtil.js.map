{"version":3,"file":"OlSvgUtil.js","sourceRoot":"","sources":["../../src/Util/OlSvgUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { MarkSymbolizer, WellKnownName } from 'geostyler-style';\r\nimport OlStyleUtil, { DEGREES_TO_RADIANS } from './OlStyleUtil';\r\n\r\nexport const LINE_WELLKNOWNNAMES = ['horline', 'vertline', 'line'];\r\nexport const NOFILL_WELLKNOWNNAMES = [\r\n  'horline',\r\n  'vertline',\r\n  'line',\r\n  'cross',\r\n  'cross2',\r\n  'slash',\r\n  'backslash',\r\n  'oarrow',\r\n  'x',\r\n  'half_arc',\r\n  'third_arc',\r\n  'quarter_arc',\r\n  'arrowhead'\r\n];\r\n\r\nconst SVG_URI_SCHEME = 'data:image/svg+xml;utf8,';\r\n\r\nexport type svgDefinition = {\r\n  [key: string]: string;\r\n};\r\n\r\nexport const getEncodedSvg = (svgString: string) => {\r\n  return SVG_URI_SCHEME + encodeURIComponent(svgString);\r\n};\r\n\r\nexport const getDecodedSvg = (svgEncodedString: string) => {\r\n  return decodeURIComponent(svgEncodedString).replace(SVG_URI_SCHEME, '');\r\n};\r\n\r\nexport const getStyleComponents = (styleString: string) => {\r\n  const styles = styleString.split(';').filter((style) => style.trim() !== '');\r\n\r\n  // Convert the declarations into a key-value map\r\n  const styleComponents: Record<string, string> = {};\r\n  for (const style of styles) {\r\n    const [key, value] = style.split(':').map((str) => str.trim());\r\n    if (key && value) {\r\n      styleComponents[key] = value;\r\n    }\r\n  };\r\n\r\n  return styleComponents;\r\n};\r\n\r\n/**\r\n * Extracts the properties of an SVG string into a GeoStyler-Style MarkSymbolizer.\r\n *\r\n * @param svgString the SVG string to parse\r\n * @returns a GeoStyler-Style MarkSymbolizer\r\n */\r\nexport const getSvgProperties = (svgString: string): MarkSymbolizer | undefined => {\r\n  const parser = new DOMParser();\r\n  const svgDoc = parser.parseFromString(svgString, 'image/svg+xml');\r\n  const svgElement = svgDoc.querySelector('svg');\r\n  const width = svgElement?.getAttribute('width');\r\n  if (!svgElement) {\r\n    return;\r\n  };\r\n\r\n  const firstChildElement = Array.from(svgElement.children).find((child) => {\r\n    return child instanceof Element;\r\n  });\r\n\r\n  const wellKnownName = firstChildElement?.getAttribute('id') as WellKnownName;\r\n  const styleString = firstChildElement?.getAttribute('style') ?? '';\r\n  const styleComponents = getStyleComponents(styleString);\r\n\r\n  const symbolizer: MarkSymbolizer = {\r\n    kind: 'Mark',\r\n    wellKnownName,\r\n    radius: Number(width) / 2,\r\n    ...styleComponents.fill && { color: styleComponents.fill },\r\n    ...styleComponents['fill-opacity'] && { fillOpacity: Number(styleComponents['fill-opacity']) },\r\n    ...styleComponents.stroke && { strokeColor: styleComponents.stroke },\r\n    ...styleComponents['stroke-width'] && { strokeWidth: Number(styleComponents['stroke-width']) },\r\n    ...styleComponents['stroke-opacity'] && { strokeOpacity: Number(styleComponents['stroke-opacity']) }\r\n  };\r\n\r\n  return symbolizer;\r\n};\r\n\r\nexport const drawSvgToCanvas = (\r\n  svgString: string,\r\n  tmpContext: CanvasRenderingContext2D,\r\n  canvasSize: number,\r\n  rotation: number\r\n) => {\r\n  const parser = new DOMParser();\r\n  const svgDoc = parser.parseFromString(svgString, 'image/svg+xml');\r\n  const svgElement = svgDoc.querySelector('svg');\r\n  if (!svgElement) {\r\n    return;\r\n  }\r\n\r\n  const viewBox = svgElement.getAttribute('viewBox') || '0 0 0 0';\r\n  const viewBoxValues = viewBox.split(' ').map(parseFloat);\r\n  const viewBoxSize = viewBoxValues[2];\r\n  const isFillPattern = viewBoxSize === 8;\r\n  const svgSize = parseFloat(svgElement.getAttribute('width') || '0');\r\n\r\n  const scaleFactor = svgSize / viewBoxSize;\r\n  const inverseScaleFactor = 1 / scaleFactor;\r\n\r\n  tmpContext.save();\r\n\r\n  // Fill patterns have all been define 8x8 with origin (0,0), and they don't require manipulation\r\n  if (!isFillPattern) {\r\n    tmpContext.translate(canvasSize / 2, canvasSize / 2);\r\n    tmpContext.rotate(rotation * DEGREES_TO_RADIANS);\r\n    tmpContext.scale(scaleFactor, scaleFactor);\r\n  };\r\n\r\n  const elements = svgElement.children;\r\n\r\n  for (const element of elements) {\r\n    const styleString = element.getAttribute('style') || '';\r\n    const styleComponents = getStyleComponents(styleString);\r\n\r\n    const fill = styleComponents.fill || '';\r\n    const fillOpacity = Number(styleComponents['fill-opacity'] ?? 1);\r\n    const fillHexAlpha = OlStyleUtil.getHexAlphaFromHexAndOpacity(fill, fillOpacity);\r\n    const stroke = styleComponents.stroke || '';\r\n    const strokeWidth = styleComponents['stroke-width'];\r\n    const strokeOpacity = Number(styleComponents['stroke-opacity'] ?? 1);\r\n    const strokeHexAlpha = OlStyleUtil.getHexAlphaFromHexAndOpacity(stroke, strokeOpacity);\r\n\r\n    if (fillHexAlpha) {\r\n      tmpContext.fillStyle = fillHexAlpha;\r\n    } else {\r\n      tmpContext.fillStyle = 'none';\r\n    }\r\n\r\n    if (strokeHexAlpha) {\r\n      tmpContext.strokeStyle = strokeHexAlpha;\r\n      // We are scaling the symbol, but we want maintain the stroke width\r\n      tmpContext.lineWidth = Number(strokeWidth) * inverseScaleFactor;\r\n    } else {\r\n      tmpContext.strokeStyle = 'none';\r\n      tmpContext.lineWidth = 0;\r\n    }\r\n\r\n    switch (element.tagName) {\r\n      case 'rect':\r\n        const x = parseFloat(element.getAttribute('x') || '0');\r\n        const y = parseFloat(element.getAttribute('y') || '0');\r\n        let width = parseFloat(String(element.getAttribute('width')));\r\n        let height = parseFloat(String(element.getAttribute('height')));\r\n\r\n        if (fillHexAlpha) {\r\n          tmpContext.fillRect(x, y, width, height);\r\n        };\r\n        if (strokeHexAlpha) {\r\n          tmpContext.strokeRect(x, y, width, height);\r\n        };\r\n        break;\r\n      case 'circle':\r\n        const cx = parseFloat(element.getAttribute('cx') || '0');\r\n        const cy = parseFloat(element.getAttribute('cy') || '0');\r\n        const r = parseFloat(element.getAttribute('r') || '0');\r\n\r\n        tmpContext.beginPath();\r\n        tmpContext.arc(cx, cy, r, 0, 2 * Math.PI);\r\n        if (fillHexAlpha) {\r\n          tmpContext.fill();\r\n        };\r\n        if (strokeHexAlpha) {\r\n          tmpContext.stroke();\r\n        };\r\n        break;\r\n      case 'polygon':\r\n        const points = element.getAttribute('points')?.split(' ');\r\n        if (!points) {break;}\r\n\r\n        tmpContext.beginPath();\r\n        for (let i = 0; i < points.length; i++) {\r\n          const point = points[i].split(',');\r\n\r\n          if (i === 0) {\r\n            tmpContext.moveTo(parseFloat(point[0]), parseFloat(point[1]));\r\n          } else {\r\n            tmpContext.lineTo(parseFloat(point[0]), parseFloat(point[1]));\r\n          }\r\n        }\r\n        tmpContext.closePath();\r\n        if (fillHexAlpha) {\r\n          tmpContext.fill();\r\n        };\r\n        if (strokeHexAlpha) {\r\n          tmpContext.stroke();\r\n        }\r\n        break;\r\n      case 'path':\r\n        const d = element.getAttribute('d');\r\n        if (!d) {break;}\r\n\r\n        const commands = d.match(/[MALZ][^MALZ]*/g);\r\n        if (!commands) {break;}\r\n\r\n        tmpContext.beginPath();\r\n        let currentX = 0;\r\n        let currentY = 0;\r\n\r\n        for (const command of commands) {\r\n          const cmd = command[0];\r\n          const args = command\r\n            .split(/[, ]+/)\r\n            .slice(1)\r\n            .map(parseFloat);\r\n          switch (cmd) {\r\n            case 'M': // moveto\r\n              for (let i = 0; i < args.length - 1; i += 2) {\r\n                if (i < 2) {\r\n                  tmpContext.moveTo(args[i], args[i + 1]);\r\n                } else {\r\n                  tmpContext.lineTo(args[i], args[i + 1]);\r\n                };\r\n                currentX = args[i];\r\n                currentY = args[i + 1];\r\n              };\r\n              break;\r\n            case 'L': // lineto\r\n              for (let i = 0; i < args.length - 1; i += 2) {\r\n                tmpContext.lineTo(args[i], args[i + 1]);\r\n                currentX = args[i];\r\n                currentY = args[i + 1];\r\n              }\r\n              break;\r\n            case 'A': // elliptical arc\r\n              // Convert SVG arc to canvas arc\r\n              svgArcToCanvas(\r\n                tmpContext,\r\n                currentX,\r\n                currentY,\r\n                args[0],\r\n                args[1],\r\n                args[2],\r\n                args[3],\r\n                args[4],\r\n                args[5],\r\n                args[6]\r\n              );\r\n\r\n              currentX = args[5];\r\n              currentY = args[6];\r\n              break;\r\n            case 'Z': // closepath\r\n              tmpContext.closePath();\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n        if (fillHexAlpha) {\r\n          tmpContext.fill();\r\n        };\r\n        if (strokeHexAlpha) {\r\n          tmpContext.stroke();\r\n        };\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  tmpContext.restore();\r\n};\r\n\r\n/**\r\n * Converts an SVG elliptical arc command into a canvas arc and draws it.\r\n *\r\n * @param ctx - The canvas rendering context to draw on.\r\n * @param x1 - The x-coordinate of the starting point of the arc.\r\n * @param y1 - The y-coordinate of the starting point of the arc.\r\n * @param rx - The x-radius of the ellipse.\r\n * @param ry - The y-radius of the ellipse.\r\n * @param xAxisRotation - The rotation of the ellipse in degrees.\r\n * @param largeArcFlag - The large-arc flag (1 if the arc spans more than 180 degrees, 0 otherwise).\r\n * @param sweepFlag - The sweep flag (1 if the arc is drawn in a positive-angle direction, 0 otherwise).\r\n * @param x2 - The x-coordinate of the ending point of the arc.\r\n * @param y2 - The y-coordinate of the ending point of the arc.\r\n */\r\nconst svgArcToCanvas = (\r\n  ctx: CanvasRenderingContext2D,\r\n  x1: number, y1: number,  // Start point\r\n  rx: number, ry: number,  // Radii\r\n  xAxisRotation: number,   // Rotation in degrees\r\n  largeArcFlag: number, sweepFlag: number, // Arc flags\r\n  x2: number, y2: number   // End point\r\n) => {\r\n  const rad = (angle: number) => (angle * Math.PI) / 180;\r\n\r\n  // Convert SVG elliptical arc to canvas-friendly parameters\r\n  const dx = (x1 - x2) / 2;\r\n  const dy = (y1 - y2) / 2;\r\n  const cosRot = Math.cos(rad(xAxisRotation));\r\n  const sinRot = Math.sin(rad(xAxisRotation));\r\n\r\n  // Compute transformed start and end points\r\n  const x1p = cosRot * dx + sinRot * dy;\r\n  const y1p = -sinRot * dx + cosRot * dy;\r\n\r\n  // Correct radii if necessary\r\n  let rxsq = rx * rx;\r\n  let rysq = ry * ry;\r\n  let x1psq = x1p * x1p;\r\n  let y1psq = y1p * y1p;\r\n\r\n  let radiiCheck = x1psq / rxsq + y1psq / rysq;\r\n  if (radiiCheck > 1) {\r\n    rx *= Math.sqrt(radiiCheck);\r\n    ry *= Math.sqrt(radiiCheck);\r\n    rxsq = rx * rx;\r\n    rysq = ry * ry;\r\n  }\r\n\r\n  // Compute center of the ellipse\r\n  const sign = largeArcFlag !== sweepFlag ? 1 : -1;\r\n  const coef = sign * Math.sqrt(\r\n    Math.max(0, (rxsq * rysq - rxsq * y1psq - rysq * x1psq) / (rxsq * y1psq + rysq * x1psq))\r\n  );\r\n\r\n  const cxp = coef * ((rx * y1p) / ry);\r\n  const cyp = coef * (-(ry * x1p) / rx);\r\n\r\n  // Compute center in original coordinate system\r\n  const cx = cosRot * cxp - sinRot * cyp + (x1 + x2) / 2;\r\n  const cy = sinRot * cxp + cosRot * cyp + (y1 + y2) / 2;\r\n\r\n  // Compute start and end angles\r\n  const startAngle = Math.atan2((y1p - cyp) / ry, (x1p - cxp) / rx);\r\n  let endAngle = Math.atan2((-y1p - cyp) / ry, (-x1p - cxp) / rx);\r\n\r\n  // Adjust end angle based on sweep flag\r\n  if (!sweepFlag && endAngle > startAngle) {\r\n    endAngle -= 2 * Math.PI;\r\n  } else if (sweepFlag && endAngle < startAngle) {\r\n    endAngle += 2 * Math.PI;\r\n  }\r\n\r\n  // Draw the arc\r\n  ctx.arc(cx, cy, rx, startAngle, endAngle, !sweepFlag);\r\n};\r\n"]}